{"version":3,"file":"testspriteminimal.c.js","sources":["../SDL-2.0.0/testspriteminimal.c"],"names":[],"mappingsuCA;;AApCA;AACA;AAGA;;;AAGA;;AAEA;AAAA;;;AAIA;;;AAGA;;;AAIA;;;;;;AAfA;AAAA;;;AAqBA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA;;;AAOA;;AAJA;;;AAIA;;;;;;;;;;;;;AA8CA;;;;AAIA;;;AAIA;;;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;;AADA;AACA;AAAA;;AATA;;AAkBA;;;;;;;AAAA;;;;;;AAIA;;;;;;;AAGA;;;;;;;AArEA;AACA;;;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAEA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAEA;AACA;;AAIA;AAfA;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApFA","sourcesContent":["/*\n  Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely.\n*/\n/* Simple program:  Move N sprites around on the screen as fast as possible */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <time.h>\n\n#include \"SDL.h\"\n\n#define WINDOW_WIDTH    640\n#define WINDOW_HEIGHT   480\n#define NUM_SPRITES     100\n#define MAX_SPEED       1\n\nstatic SDL_Texture *sprite;\nstatic SDL_Rect positions[NUM_SPRITES];\nstatic SDL_Rect velocities[NUM_SPRITES];\nstatic int sprite_w, sprite_h;\n\n/* Call this instead of exit(), so we can clean up SDL: atexit() is evil. */\nstatic void\nquit(int rc)\n{\n    exit(rc);\n}\n\nint\nLoadSprite(char *file, SDL_Renderer *renderer)\n{\n    SDL_Surface *temp;\n\n    /* Load the sprite image */\n    temp = SDL_LoadBMP(file);\n    if (temp == NULL) {\n        fprintf(stderr, \"Couldn't load %s: %s\\n\", file, SDL_GetError());\n        return (-1);\n    }\n    sprite_w = temp->w;\n    sprite_h = temp->h;\n\n    /* Set transparent pixel as the pixel at (0,0) */\n    if (temp->format->palette) {\n        SDL_SetColorKey(temp, SDL_TRUE, *(Uint8 *) temp->pixels);\n    } else {\n        switch (temp->format->BitsPerPixel) {\n        case 15:\n            SDL_SetColorKey(temp, SDL_TRUE,\n                            (*(Uint16 *) temp->pixels) & 0x00007FFF);\n            break;\n        case 16:\n            SDL_SetColorKey(temp, SDL_TRUE, *(Uint16 *) temp->pixels);\n            break;\n        case 24:\n            SDL_SetColorKey(temp, SDL_TRUE,\n                            (*(Uint32 *) temp->pixels) & 0x00FFFFFF);\n            break;\n        case 32:\n            SDL_SetColorKey(temp, SDL_TRUE, *(Uint32 *) temp->pixels);\n            break;\n        }\n    }\n\n    /* Create textures from the image */\n    sprite = SDL_CreateTextureFromSurface(renderer, temp);\n    if (!sprite) {\n        fprintf(stderr, \"Couldn't create texture: %s\\n\", SDL_GetError());\n        SDL_FreeSurface(temp);\n        return (-1);\n    }\n    SDL_FreeSurface(temp);\n\n    /* We're ready to roll. :) */\n    return (0);\n}\n\nvoid\nMoveSprites(SDL_Renderer * renderer, SDL_Texture * sprite)\n{\n    int i;\n    int window_w = WINDOW_WIDTH;\n    int window_h = WINDOW_HEIGHT;\n    SDL_Rect *position, *velocity;\n\n    /* Draw a gray background */\n    SDL_SetRenderDrawColor(renderer, 0xA0, 0xA0, 0xA0, 0xFF);\n    SDL_RenderClear(renderer);\n\n    /* Move the sprite, bounce at the wall, and draw */\n    for (i = 0; i < NUM_SPRITES; ++i) {\n        position = &positions[i];\n        velocity = &velocities[i];\n        position->x += velocity->x;\n        if ((position->x < 0) || (position->x >= (window_w - sprite_w))) {\n            velocity->x = -velocity->x;\n            position->x += velocity->x;\n        }\n        position->y += velocity->y;\n        if ((position->y < 0) || (position->y >= (window_h - sprite_h))) {\n            velocity->y = -velocity->y;\n            position->y += velocity->y;\n        }\n\n        /* Blit the sprite onto the screen */\n        SDL_RenderCopy(renderer, sprite, NULL, position);\n    }\n\n    /* Update the screen! */\n    SDL_RenderPresent(renderer);\n}\n\nint\nmain(int argc, char *argv[])\n{\n    SDL_Window *window;\n    SDL_Renderer *renderer;\n    int i, done;\n    SDL_Event event;\n\n    if (SDL_CreateWindowAndRenderer(WINDOW_WIDTH, WINDOW_HEIGHT, 0, &window, &renderer) < 0) {\n        quit(2);\n    }\n\n    if (LoadSprite(\"icon.bmp\", renderer) < 0) {\n        quit(2);\n    }\n\n    /* Initialize the sprite positions */\n    srand(time(NULL));\n    for (i = 0; i < NUM_SPRITES; ++i) {\n        positions[i].x = rand() % (WINDOW_WIDTH - sprite_w);\n        positions[i].y = rand() % (WINDOW_HEIGHT - sprite_h);\n        positions[i].w = sprite_w;\n        positions[i].h = sprite_h;\n        velocities[i].x = 0;\n        velocities[i].y = 0;\n        while (!velocities[i].x && !velocities[i].y) {\n            velocities[i].x = (rand() % (MAX_SPEED * 2 + 1)) - MAX_SPEED;\n            velocities[i].y = (rand() % (MAX_SPEED * 2 + 1)) - MAX_SPEED;\n        }\n    }\n\n    /* Main render loop */\n    done = 0;\n    while (!done) {\n        /* Check for events */\n        while (SDL_PollEvent(&event)) {\n            if (event.type == SDL_QUIT || event.type == SDL_KEYDOWN) {\n                done = 1;\n            }\n        }\n        MoveSprites(renderer, sprite);\n    }\n\n    quit(0);\n\n    return 0; /* to prevent compiler warning */\n}\n\n/* vi: set ts=4 sw=4 expandtab: */\n"]}