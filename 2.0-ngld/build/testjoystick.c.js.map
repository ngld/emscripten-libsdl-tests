{"version":3,"file":"testjoystick.c.js","sources":["../SDL-2.0.0/testjoystick.c"],"names":[],"mappingssourcesContent":["/*\n  Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely.\n*/\n\n/* Simple program to test the SDL joystick routines */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"SDL.h\"\n\n#ifndef SDL_JOYSTICK_DISABLED\n\n#ifdef __IPHONEOS__\n#define SCREEN_WIDTH    320\n#define SCREEN_HEIGHT   480\n#else\n#define SCREEN_WIDTH    640\n#define SCREEN_HEIGHT   480\n#endif\n\n\nstatic void\nDrawRect(SDL_Renderer *r, const int x, const int y, const int w, const int h)\n{\n    const SDL_Rect area = { x, y, w, h };\n    SDL_RenderFillRect(r, &area);\n}\n\nstatic SDL_bool\nWatchJoystick(SDL_Joystick * joystick)\n{\n    SDL_Window *window = NULL;\n    SDL_Renderer *screen = NULL;\n    const char *name = NULL;\n    SDL_bool retval = SDL_FALSE;\n    SDL_bool done = SDL_FALSE;\n    SDL_Event event;\n    int i;\n\n    /* Create a window to display joystick axis position */\n    window = SDL_CreateWindow(\"Joystick Test\", SDL_WINDOWPOS_CENTERED,\n                              SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH,\n                              SCREEN_HEIGHT, 0);\n    if (window == NULL) {\n        fprintf(stderr, \"Couldn't create window: %s\\n\", SDL_GetError());\n        return SDL_FALSE;\n    }\n\n    screen = SDL_CreateRenderer(window, -1, 0);\n    if (screen == NULL) {\n        fprintf(stderr, \"Couldn't create renderer: %s\\n\", SDL_GetError());\n        SDL_DestroyWindow(window);\n        return SDL_FALSE;\n    }\n\n    SDL_SetRenderDrawColor(screen, 0x00, 0x00, 0x00, SDL_ALPHA_OPAQUE);\n    SDL_RenderClear(screen);\n    SDL_RenderPresent(screen);\n    SDL_RaiseWindow(window);\n\n    /* Print info about the joystick we are watching */\n    name = SDL_JoystickName(joystick);\n    printf(\"Watching joystick %d: (%s)\\n\", SDL_JoystickInstanceID(joystick),\n           name ? name : \"Unknown Joystick\");\n    printf(\"Joystick has %d axes, %d hats, %d balls, and %d buttons\\n\",\n           SDL_JoystickNumAxes(joystick), SDL_JoystickNumHats(joystick),\n           SDL_JoystickNumBalls(joystick), SDL_JoystickNumButtons(joystick));\n\n    /* Loop, getting joystick events! */\n    while (!done) {\n        /* blank screen, set up for drawing this frame. */\n        SDL_SetRenderDrawColor(screen, 0x00, 0x00, 0x00, SDL_ALPHA_OPAQUE);\n        SDL_RenderClear(screen);\n\n        while (SDL_PollEvent(&event)) {\n            switch (event.type) {\n            case SDL_JOYAXISMOTION:\n                printf(\"Joystick %d axis %d value: %d\\n\",\n                       event.jaxis.which,\n                       event.jaxis.axis, event.jaxis.value);\n                break;\n            case SDL_JOYHATMOTION:\n                printf(\"Joystick %d hat %d value:\",\n                       event.jhat.which, event.jhat.hat);\n                if (event.jhat.value == SDL_HAT_CENTERED)\n                    printf(\" centered\");\n                if (event.jhat.value & SDL_HAT_UP)\n                    printf(\" up\");\n                if (event.jhat.value & SDL_HAT_RIGHT)\n                    printf(\" right\");\n                if (event.jhat.value & SDL_HAT_DOWN)\n                    printf(\" down\");\n                if (event.jhat.value & SDL_HAT_LEFT)\n                    printf(\" left\");\n                printf(\"\\n\");\n                break;\n            case SDL_JOYBALLMOTION:\n                printf(\"Joystick %d ball %d delta: (%d,%d)\\n\",\n                       event.jball.which,\n                       event.jball.ball, event.jball.xrel, event.jball.yrel);\n                break;\n            case SDL_JOYBUTTONDOWN:\n                printf(\"Joystick %d button %d down\\n\",\n                       event.jbutton.which, event.jbutton.button);\n                break;\n            case SDL_JOYBUTTONUP:\n                printf(\"Joystick %d button %d up\\n\",\n                       event.jbutton.which, event.jbutton.button);\n                break;\n            case SDL_KEYDOWN:\n                if ((event.key.keysym.sym != SDLK_ESCAPE) &&\n                    (event.key.keysym.sym != SDLK_AC_BACK)) {\n                    break;\n                }\n                /* Fall through to signal quit */\n            case SDL_FINGERDOWN:\n            case SDL_MOUSEBUTTONDOWN:\n            case SDL_QUIT:\n                done = SDL_TRUE;\n                break;\n            default:\n                break;\n            }\n        }\n        /* Update visual joystick state */\n        SDL_SetRenderDrawColor(screen, 0x00, 0xFF, 0x00, SDL_ALPHA_OPAQUE);\n        for (i = 0; i < SDL_JoystickNumButtons(joystick); ++i) {\n            if (SDL_JoystickGetButton(joystick, i) == SDL_PRESSED) {\n                DrawRect(screen, (i%20) * 34, SCREEN_HEIGHT - 68 + (i/20) * 34, 32, 32);\n            }\n        }\n\n        SDL_SetRenderDrawColor(screen, 0xFF, 0x00, 0x00, SDL_ALPHA_OPAQUE);\n        for (i = 0; i < SDL_JoystickNumAxes(joystick); ++i) {\n            /* Draw the X/Y axis */\n            int x, y;\n            x = (((int) SDL_JoystickGetAxis(joystick, i)) + 32768);\n            x *= SCREEN_WIDTH;\n            x /= 65535;\n            if (x < 0) {\n                x = 0;\n            } else if (x > (SCREEN_WIDTH - 16)) {\n                x = SCREEN_WIDTH - 16;\n            }\n            ++i;\n            if (i < SDL_JoystickNumAxes(joystick)) {\n                y = (((int) SDL_JoystickGetAxis(joystick, i)) + 32768);\n            } else {\n                y = 32768;\n            }\n            y *= SCREEN_HEIGHT;\n            y /= 65535;\n            if (y < 0) {\n                y = 0;\n            } else if (y > (SCREEN_HEIGHT - 16)) {\n                y = SCREEN_HEIGHT - 16;\n            }\n\n            DrawRect(screen, x, y, 16, 16);\n        }\n\n        SDL_SetRenderDrawColor(screen, 0x00, 0x00, 0xFF, SDL_ALPHA_OPAQUE);\n        for (i = 0; i < SDL_JoystickNumHats(joystick); ++i) {\n            /* Derive the new position */\n            int x = SCREEN_WIDTH/2;\n            int y = SCREEN_HEIGHT/2;\n            const Uint8 hat_pos = SDL_JoystickGetHat(joystick, i);\n\n            if (hat_pos & SDL_HAT_UP) {\n                y = 0;\n            } else if (hat_pos & SDL_HAT_DOWN) {\n                y = SCREEN_HEIGHT-8;\n            }\n\n            if (hat_pos & SDL_HAT_LEFT) {\n                x = 0;\n            } else if (hat_pos & SDL_HAT_RIGHT) {\n                x = SCREEN_WIDTH-8;\n            }\n\n            DrawRect(screen, x, y, 8, 8);\n        }\n\n        SDL_RenderPresent(screen);\n\n        if (SDL_JoystickGetAttached( joystick ) == 0) {\n            done = SDL_TRUE;\n            retval = SDL_TRUE;  /* keep going, wait for reattach. */\n        }\n    }\n\n    SDL_DestroyRenderer(screen);\n    SDL_DestroyWindow(window);\n    return retval;\n}\n\nint\nmain(int argc, char *argv[])\n{\n    const char *name;\n    int i;\n    SDL_Joystick *joystick;\n\n    /* Initialize SDL (Note: video is required to start event loop) */\n    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_JOYSTICK) < 0) {\n        fprintf(stderr, \"Couldn't initialize SDL: %s\\n\", SDL_GetError());\n        exit(1);\n    }\n\n    /* Print information about the joysticks */\n    printf(\"There are %d joysticks attached\\n\", SDL_NumJoysticks());\n    for (i = 0; i < SDL_NumJoysticks(); ++i) {\n        name = SDL_JoystickNameForIndex(i);\n        printf(\"Joystick %d: %s\\n\", i, name ? name : \"Unknown Joystick\");\n        joystick = SDL_JoystickOpen(i);\n        if (joystick == NULL) {\n            fprintf(stderr, \"SDL_JoystickOpen(%d) failed: %s\\n\", i,\n                    SDL_GetError());\n        } else {\n            char guid[64];\n            SDL_JoystickGetGUIDString(SDL_JoystickGetGUID(joystick),\n                                      guid, sizeof (guid));\n            printf(\"       axes: %d\\n\", SDL_JoystickNumAxes(joystick));\n            printf(\"      balls: %d\\n\", SDL_JoystickNumBalls(joystick));\n            printf(\"       hats: %d\\n\", SDL_JoystickNumHats(joystick));\n            printf(\"    buttons: %d\\n\", SDL_JoystickNumButtons(joystick));\n            printf(\"instance id: %d\\n\", SDL_JoystickInstanceID(joystick));\n            printf(\"       guid: %s\\n\", guid);\n            SDL_JoystickClose(joystick);\n        }\n    }\n\n#ifdef ANDROID\n    if (SDL_NumJoysticks() > 0) {\n#else\n    if (argv[1]) {\n#endif\n        SDL_bool reportederror = SDL_FALSE;\n        SDL_bool keepGoing = SDL_TRUE;\n        SDL_Event event;\n#ifdef ANDROID\n        joystick = SDL_JoystickOpen(0);\n#else\n        joystick = SDL_JoystickOpen(atoi(argv[1]));\n#endif\n        while ( keepGoing ) {\n            if (joystick == NULL) {\n                if ( !reportederror ) {\n                    printf(\"Couldn't open joystick %d: %s\\n\", atoi(argv[1]), SDL_GetError());\n                    keepGoing = SDL_FALSE;\n                    reportederror = SDL_TRUE;\n                }\n            } else {\n                reportederror = SDL_FALSE;\n                keepGoing = WatchJoystick(joystick);\n                SDL_JoystickClose(joystick);\n            }\n\n            joystick = NULL;\n            if (keepGoing) {\n                printf(\"Waiting for attach\\n\");\n            }\n            while (keepGoing) {\n                SDL_WaitEvent(&event);\n                if ((event.type == SDL_QUIT) || (event.type == SDL_FINGERDOWN)\n                    || (event.type == SDL_MOUSEBUTTONDOWN)) {\n                    keepGoing = SDL_FALSE;\n                } else if (event.type == SDL_JOYDEVICEADDED) {\n                    joystick = SDL_JoystickOpen(atoi(argv[1]));\n                    break;\n                }\n            }\n        }\n    }\n    SDL_QuitSubSystem(SDL_INIT_VIDEO | SDL_INIT_JOYSTICK);\n\n#ifdef ANDROID\n    exit(0);\n#else\n    return 0;\n#endif\n}\n\n#else\n\nint\nmain(int argc, char *argv[])\n{\n    fprintf(stderr, \"SDL compiled without Joystick support.\\n\");\n    exit(1);\n}\n\n#endif\n"]}