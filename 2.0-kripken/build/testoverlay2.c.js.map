{"version":3,"file":"testoverlay2.c.js","sources":["../SDL-2.0.0/testoverlay2.c"],"names":[],"mappingsyPA;AAAA;AAAA;AAAA;;AA+LA;;;;AA1LA;;AACA;;AAeA;AAAA;AAEA;;;AAhBA;;AAEA;AAAA;AAEA;;;;;;;;;AAGA;AAAA;AAEA;;;;;;;;;;;AAmCA;AAzFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA8EA;;;;AADA;AAzFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA8EA;;;AAEA;AAAA;AAAA;AACA;;;;AAzBA;;AAeA;AAAA;AAEA;;;AAhBA;;AAEA;AAAA;AAEA;;;;;;;;;AAGA;AAAA;AAEA;;;;;;;;AAoBA;;AAEA;AAAA;AAEA;;;AAIA;;AAEA;AAAA;AACA;AACA;;;AAGA;AAEA;AAGA;AACA;AACA;;AAMA;AAAA;AAAA;AAAA;AACA;AACA;;;AAGA;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;;;AAGA;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;;;AAUA;;;AACA;;;;AAEA;AAAA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;AAhNA;AAAA;AAAA;AAyCA;;AAEA;AACA;;;;;;;AALA;;;;;;;;;;;AADA;;;;;;;;;;;AAmKA;;AAgBA;;;;;;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAKA;AAEA;AAEA;AACA;AAIA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAXA;AACA;AAAA;AACA;AAAA;;;;;;;;;AAIA;AACA;;;;;;;;;;;;;;;;AAIA;AACA;;;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;AAGA;AAEA;AAAA;;;;;AAEA;AACA;AACA;;;;;;;;;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxSA;AACA","sourcesContent":["/*\n  Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely.\n*/\n/********************************************************************************\n *                                                                              *\n * Test of the overlay used for moved pictures, test more closed to real life.  *\n * Running trojan moose :) Coded by Mike Gorchak.                               *\n *                                                                              *\n ********************************************************************************/\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\n#include \"SDL.h\"\n\n#define MOOSEPIC_W 64\n#define MOOSEPIC_H 88\n\n#define MOOSEFRAME_SIZE (MOOSEPIC_W * MOOSEPIC_H)\n#define MOOSEFRAMES_COUNT 10\n\nSDL_Color MooseColors[84] = {\n    {49, 49, 49}\n    , {66, 24, 0}\n    , {66, 33, 0}\n    , {66, 66, 66}\n    ,\n    {66, 115, 49}\n    , {74, 33, 0}\n    , {74, 41, 16}\n    , {82, 33, 8}\n    ,\n    {82, 41, 8}\n    , {82, 49, 16}\n    , {82, 82, 82}\n    , {90, 41, 8}\n    ,\n    {90, 41, 16}\n    , {90, 57, 24}\n    , {99, 49, 16}\n    , {99, 66, 24}\n    ,\n    {99, 66, 33}\n    , {99, 74, 33}\n    , {107, 57, 24}\n    , {107, 82, 41}\n    ,\n    {115, 57, 33}\n    , {115, 66, 33}\n    , {115, 66, 41}\n    , {115, 74, 0}\n    ,\n    {115, 90, 49}\n    , {115, 115, 115}\n    , {123, 82, 0}\n    , {123, 99, 57}\n    ,\n    {132, 66, 41}\n    , {132, 74, 41}\n    , {132, 90, 8}\n    , {132, 99, 33}\n    ,\n    {132, 99, 66}\n    , {132, 107, 66}\n    , {140, 74, 49}\n    , {140, 99, 16}\n    ,\n    {140, 107, 74}\n    , {140, 115, 74}\n    , {148, 107, 24}\n    , {148, 115, 82}\n    ,\n    {148, 123, 74}\n    , {148, 123, 90}\n    , {156, 115, 33}\n    , {156, 115, 90}\n    ,\n    {156, 123, 82}\n    , {156, 132, 82}\n    , {156, 132, 99}\n    , {156, 156, 156}\n    ,\n    {165, 123, 49}\n    , {165, 123, 90}\n    , {165, 132, 82}\n    , {165, 132, 90}\n    ,\n    {165, 132, 99}\n    , {165, 140, 90}\n    , {173, 132, 57}\n    , {173, 132, 99}\n    ,\n    {173, 140, 107}\n    , {173, 140, 115}\n    , {173, 148, 99}\n    , {173, 173, 173}\n    ,\n    {181, 140, 74}\n    , {181, 148, 115}\n    , {181, 148, 123}\n    , {181, 156, 107}\n    ,\n    {189, 148, 123}\n    , {189, 156, 82}\n    , {189, 156, 123}\n    , {189, 156, 132}\n    ,\n    {189, 189, 189}\n    , {198, 156, 123}\n    , {198, 165, 132}\n    , {206, 165, 99}\n    ,\n    {206, 165, 132}\n    , {206, 173, 140}\n    , {206, 206, 206}\n    , {214, 173, 115}\n    ,\n    {214, 173, 140}\n    , {222, 181, 148}\n    , {222, 189, 132}\n    , {222, 189, 156}\n    ,\n    {222, 222, 222}\n    , {231, 198, 165}\n    , {231, 231, 231}\n    , {239, 206, 173}\n};\n\n\n/* Call this instead of exit(), so we can clean up SDL: atexit() is evil. */\nstatic void\nquit(int rc)\n{\n    SDL_Quit();\n    exit(rc);\n}\n\n/* All RGB2YUV conversion code and some other parts of code has been taken from testoverlay.c */\n\n/* NOTE: These RGB conversion functions are not intended for speed,\n         only as examples.\n*/\n\nvoid\nRGBtoYUV(Uint8 * rgb, int *yuv, int monochrome, int luminance)\n{\n    if (monochrome) {\n#if 1                           /* these are the two formulas that I found on the FourCC site... */\n        yuv[0] = (int)(0.299 * rgb[0] + 0.587 * rgb[1] + 0.114 * rgb[2]);\n        yuv[1] = 128;\n        yuv[2] = 128;\n#else\n        yuv[0] = (int)(0.257 * rgb[0]) + (0.504 * rgb[1]) + (0.098 * rgb[2]) + 16;\n        yuv[1] = 128;\n        yuv[2] = 128;\n#endif\n    } else {\n#if 1                           /* these are the two formulas that I found on the FourCC site... */\n        yuv[0] = (int)(0.299 * rgb[0] + 0.587 * rgb[1] + 0.114 * rgb[2]);\n        yuv[1] = (int)((rgb[2] - yuv[0]) * 0.565 + 128);\n        yuv[2] = (int)((rgb[0] - yuv[0]) * 0.713 + 128);\n#else\n        yuv[0] = (0.257 * rgb[0]) + (0.504 * rgb[1]) + (0.098 * rgb[2]) + 16;\n        yuv[1] = 128 - (0.148 * rgb[0]) - (0.291 * rgb[1]) + (0.439 * rgb[2]);\n        yuv[2] = 128 + (0.439 * rgb[0]) - (0.368 * rgb[1]) - (0.071 * rgb[2]);\n#endif\n    }\n\n    if (luminance != 100) {\n        yuv[0] = yuv[0] * luminance / 100;\n        if (yuv[0] > 255)\n            yuv[0] = 255;\n    }\n}\n\nvoid\nConvertRGBtoYV12(Uint8 *rgb, Uint8 *out, int w, int h,\n                 int monochrome, int luminance)\n{\n    int x, y;\n    int yuv[3];\n    Uint8 *op[3];\n\n    op[0] = out;\n    op[1] = op[0] + w*h;\n    op[2] = op[1] + w*h/4;\n    for (y = 0; y < h; ++y) {\n        for (x = 0; x < w; ++x) {\n            RGBtoYUV(rgb, yuv, monochrome, luminance);\n            *(op[0]++) = yuv[0];\n            if (x % 2 == 0 && y % 2 == 0) {\n                *(op[1]++) = yuv[2];\n                *(op[2]++) = yuv[1];\n            }\n            rgb += 3;\n        }\n    }\n}\n\nstatic void\nPrintUsage(char *argv0)\n{\n    fprintf(stderr, \"Usage: %s [arg] [arg] [arg] ...\\n\", argv0);\n    fprintf(stderr, \"\\n\");\n    fprintf(stderr, \"Where 'arg' is any of the following options:\\n\");\n    fprintf(stderr, \"\\n\");\n    fprintf(stderr, \"    -fps <frames per second>\\n\");\n    fprintf(stderr, \"    -nodelay\\n\");\n    fprintf(stderr, \"    -format <fmt> (one of the: YV12, IYUV, YUY2, UYVY, YVYU)\\n\");\n    fprintf(stderr, \"    -scale <scale factor> (initial scale of the overlay)\\n\");\n    fprintf(stderr, \"    -help (shows this help)\\n\");\n    fprintf(stderr, \"\\n\");\n    fprintf(stderr,\n            \"Press ESC to exit, or SPACE to freeze the movie while application running.\\n\");\n    fprintf(stderr, \"\\n\");\n}\n\nint\nmain(int argc, char **argv)\n{\n    Uint8 *RawMooseData;\n    SDL_RWops *handle;\n    int window_w;\n    int window_h;\n    SDL_Window *window;\n    SDL_Renderer *renderer;\n    Uint8 MooseFrame[MOOSEFRAMES_COUNT][MOOSEFRAME_SIZE*2];\n    SDL_Texture *MooseTexture;\n    SDL_Rect displayrect;\n    SDL_Event event;\n    int paused = 0;\n    int i, j;\n    int fps = 12;\n    int fpsdelay;\n    int nodelay = 0;\n    Uint32 pixel_format = SDL_PIXELFORMAT_YV12;\n    int scale = 5;\n    SDL_bool done = SDL_FALSE;\n\n    if (SDL_Init(SDL_INIT_VIDEO) < 0) {\n        fprintf(stderr, \"Couldn't initialize SDL: %s\\n\", SDL_GetError());\n        return 3;\n    }\n\n    while (argc > 1) {\n        if (strcmp(argv[1], \"-fps\") == 0) {\n            if (argv[2]) {\n                fps = atoi(argv[2]);\n                if (fps == 0) {\n                    fprintf(stderr,\n                            \"The -fps option requires an argument [from 1 to 1000], default is 12.\\n\");\n                    quit(10);\n                }\n                if ((fps < 0) || (fps > 1000)) {\n                    fprintf(stderr,\n                            \"The -fps option must be in range from 1 to 1000, default is 12.\\n\");\n                    quit(10);\n                }\n                argv += 2;\n                argc -= 2;\n            } else {\n                fprintf(stderr,\n                        \"The -fps option requires an argument [from 1 to 1000], default is 12.\\n\");\n                quit(10);\n            }\n        } else if (strcmp(argv[1], \"-nodelay\") == 0) {\n            nodelay = 1;\n            argv += 1;\n            argc -= 1;\n        } else if (strcmp(argv[1], \"-scale\") == 0) {\n            if (argv[2]) {\n                scale = atoi(argv[2]);\n                if (scale == 0) {\n                    fprintf(stderr,\n                            \"The -scale option requires an argument [from 1 to 50], default is 5.\\n\");\n                    quit(10);\n                }\n                if ((scale < 0) || (scale > 50)) {\n                    fprintf(stderr,\n                            \"The -scale option must be in range from 1 to 50, default is 5.\\n\");\n                    quit(10);\n                }\n                argv += 2;\n                argc -= 2;\n            } else {\n                fprintf(stderr,\n                        \"The -fps option requires an argument [from 1 to 1000], default is 12.\\n\");\n                quit(10);\n            }\n        } else if ((strcmp(argv[1], \"-help\") == 0)\n                   || (strcmp(argv[1], \"-h\") == 0)) {\n            PrintUsage(argv[0]);\n            quit(0);\n        } else {\n            fprintf(stderr, \"Unrecognized option: %s.\\n\", argv[1]);\n            quit(10);\n        }\n        break;\n    }\n\n    RawMooseData = (Uint8 *) malloc(MOOSEFRAME_SIZE * MOOSEFRAMES_COUNT);\n    if (RawMooseData == NULL) {\n        fprintf(stderr, \"Can't allocate memory for movie !\\n\");\n        free(RawMooseData);\n        quit(1);\n    }\n\n    /* load the trojan moose images */\n    handle = SDL_RWFromFile(\"moose.dat\", \"rb\");\n    if (handle == NULL) {\n        fprintf(stderr, \"Can't find the file moose.dat !\\n\");\n        free(RawMooseData);\n        quit(2);\n    }\n\n    SDL_RWread(handle, RawMooseData, MOOSEFRAME_SIZE, MOOSEFRAMES_COUNT);\n\n    SDL_RWclose(handle);\n\n    /* Create the window and renderer */\n    window_w = MOOSEPIC_W * scale;\n    window_h = MOOSEPIC_H * scale;\n    window = SDL_CreateWindow(\"Happy Moose\",\n                              SDL_WINDOWPOS_UNDEFINED,\n                              SDL_WINDOWPOS_UNDEFINED,\n                              window_w, window_h,\n                              SDL_WINDOW_RESIZABLE);\n    if (!window) {\n        fprintf(stderr, \"Couldn't set create window: %s\\n\", SDL_GetError());\n        free(RawMooseData);\n        quit(4);\n    }\n\n    renderer = SDL_CreateRenderer(window, -1, 0);\n    if (!renderer) {\n        fprintf(stderr, \"Couldn't set create renderer: %s\\n\", SDL_GetError());\n        free(RawMooseData);\n        quit(4);\n    }\n\n    MooseTexture = SDL_CreateTexture(renderer, pixel_format, SDL_TEXTUREACCESS_STREAMING, MOOSEPIC_W, MOOSEPIC_H);\n    if (!MooseTexture) {\n        fprintf(stderr, \"Couldn't set create texture: %s\\n\", SDL_GetError());\n        free(RawMooseData);\n        quit(5);\n    }\n    /* Uncomment this to check vertex color with a YUV texture */\n    /*SDL_SetTextureColorMod(MooseTexture, 0xff, 0x80, 0x80);*/\n\n    for (i = 0; i < MOOSEFRAMES_COUNT; i++) {\n        Uint8 MooseFrameRGB[MOOSEFRAME_SIZE*3];\n        Uint8 *rgb;\n        Uint8 *frame;\n\n        rgb = MooseFrameRGB;\n        frame = RawMooseData + i * MOOSEFRAME_SIZE;\n        for (j = 0; j < MOOSEFRAME_SIZE; ++j) {\n            rgb[0] = MooseColors[frame[j]].r;\n            rgb[1] = MooseColors[frame[j]].g;\n            rgb[2] = MooseColors[frame[j]].b;\n            rgb += 3;\n        }\n        ConvertRGBtoYV12(MooseFrameRGB, MooseFrame[i], MOOSEPIC_W, MOOSEPIC_H, 0, 100);\n    }\n\n    free(RawMooseData);\n\n    /* set the start frame */\n    i = 0;\n    if (nodelay) {\n        fpsdelay = 0;\n    } else {\n        fpsdelay = 1000 / fps;\n    }\n\n    displayrect.x = 0;\n    displayrect.y = 0;\n    displayrect.w = window_w;\n    displayrect.h = window_h;\n\n    /* Ignore key up events, they don't even get filtered */\n    SDL_EventState(SDL_KEYUP, SDL_IGNORE);\n\n    /* Loop, waiting for QUIT or RESIZE */\n    while (!done) {\n        while (SDL_PollEvent(&event)) {\n            switch (event.type) {\n            case SDL_WINDOWEVENT:\n                if (event.window.event == SDL_WINDOWEVENT_RESIZED) {\n                    SDL_RenderSetViewport(renderer, NULL);\n                    displayrect.w = window_w = event.window.data1;\n                    displayrect.h = window_h = event.window.data2;\n                }\n                break;\n            case SDL_MOUSEBUTTONDOWN:\n                displayrect.x = event.button.x - window_w / 2;\n                displayrect.y = event.button.y - window_h / 2;\n                break;\n            case SDL_MOUSEMOTION:\n                if (event.motion.state) {\n                    displayrect.x = event.motion.x - window_w / 2;\n                    displayrect.y = event.motion.y - window_h / 2;\n                }\n                break;\n            case SDL_KEYDOWN:\n                if (event.key.keysym.sym == SDLK_SPACE) {\n                    paused = !paused;\n                    break;\n                }\n                if (event.key.keysym.sym != SDLK_ESCAPE) {\n                    break;\n                }\n            case SDL_QUIT:\n                done = SDL_TRUE;\n                break;\n            }\n        }\n        SDL_Delay(fpsdelay);\n\n        if (!paused) {\n            i = (i + 1) % MOOSEFRAMES_COUNT;\n\n            SDL_UpdateTexture(MooseTexture, NULL, MooseFrame[i], MOOSEPIC_W*SDL_BYTESPERPIXEL(pixel_format));\n        }\n        SDL_RenderClear(renderer);\n        SDL_RenderCopy(renderer, MooseTexture, NULL, &displayrect);\n        SDL_RenderPresent(renderer);\n    }\n    SDL_DestroyRenderer(renderer);\n    quit(0);\n    return 0;\n}\n\n/* vi: set ts=4 sw=4 expandtab: */\n"]}