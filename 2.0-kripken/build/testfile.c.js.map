{"version":3,"file":"testfile.c.js","sources":["../SDL-2.0.0/testfile.c"],"names":[],"mappingsxOA;AACA;;AAyOA;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9NA;AAAA;;AAEA;AAAA;;AAVA;AACA;AAYA","sourcesContent":["/*\n  Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely.\n*/\n\n/* sanity tests on SDL_rwops.c (usefull for alternative implementations of stdio rwops) */\n\n// quiet windows compiler warnings\n#define _CRT_NONSTDC_NO_WARNINGS\n\n#include <stdlib.h>\n\n#ifndef _MSC_VER\n#include <unistd.h>\n#endif\n\n#include \"SDL.h\"\n#include \"SDL_endian.h\"\n\n\n#include <stdio.h>\n\n/* WARNING ! those 2 files will be destroyed by this test program */\n\n#ifdef __IPHONEOS__\n#define FBASENAME1  \"../Documents/sdldata1\" /* this file will be created during tests */\n#define FBASENAME2  \"../Documents/sdldata2\"     /* this file should not exist before starting test */\n#else\n#define FBASENAME1  \"sdldata1\"      /* this file will be created during tests */\n#define FBASENAME2  \"sdldata2\"      /* this file should not exist before starting test */\n#endif\n\n#ifndef NULL\n#define NULL ((void *)0)\n#endif\n\nstatic void\ncleanup(void)\n{\n\n    unlink(FBASENAME1);\n    unlink(FBASENAME2);\n}\n\nstatic void\nrwops_error_quit(unsigned line, SDL_RWops * rwops)\n{\n\n    printf(\"testfile.c(%d): failed\\n\", line);\n    if (rwops) {\n        rwops->close(rwops);    /* This calls SDL_FreeRW(rwops); */\n    }\n    cleanup();\n    exit(1);                    /* quit with rwops error (test failed) */\n}\n\n#define RWOP_ERR_QUIT(x)    rwops_error_quit( __LINE__, (x) )\n\n\n\nint\nmain(int argc, char *argv[])\n{\n    SDL_RWops *rwops = NULL;\n    char test_buf[30];\n\n    cleanup();\n\n/* test 1 : basic argument test: all those calls to SDL_RWFromFile should fail */\n\n    rwops = SDL_RWFromFile(NULL, NULL);\n    if (rwops)\n        RWOP_ERR_QUIT(rwops);\n    rwops = SDL_RWFromFile(NULL, \"ab+\");\n    if (rwops)\n        RWOP_ERR_QUIT(rwops);\n    rwops = SDL_RWFromFile(NULL, \"sldfkjsldkfj\");\n    if (rwops)\n        RWOP_ERR_QUIT(rwops);\n    rwops = SDL_RWFromFile(\"something\", \"\");\n    if (rwops)\n        RWOP_ERR_QUIT(rwops);\n    rwops = SDL_RWFromFile(\"something\", NULL);\n    if (rwops)\n        RWOP_ERR_QUIT(rwops);\n    printf(\"test1 OK\\n\");\n\n/* test 2 : check that inexistent file is not successfully opened/created when required */\n/* modes : r, r+ imply that file MUST exist\n   modes : a, a+, w, w+ checks that it succeeds (file may not exists)\n\n */\n    rwops = SDL_RWFromFile(FBASENAME2, \"rb\");   /* this file doesn't exist that call must fail */\n    if (rwops)\n        RWOP_ERR_QUIT(rwops);\n    rwops = SDL_RWFromFile(FBASENAME2, \"rb+\");  /* this file doesn't exist that call must fail */\n    if (rwops)\n        RWOP_ERR_QUIT(rwops);\n    rwops = SDL_RWFromFile(FBASENAME2, \"wb\");\n    if (!rwops)\n        RWOP_ERR_QUIT(rwops);\n    rwops->close(rwops);\n    unlink(FBASENAME2);\n    rwops = SDL_RWFromFile(FBASENAME2, \"wb+\");\n    if (!rwops)\n        RWOP_ERR_QUIT(rwops);\n    rwops->close(rwops);\n    unlink(FBASENAME2);\n    rwops = SDL_RWFromFile(FBASENAME2, \"ab\");\n    if (!rwops)\n        RWOP_ERR_QUIT(rwops);\n    rwops->close(rwops);\n    unlink(FBASENAME2);\n    rwops = SDL_RWFromFile(FBASENAME2, \"ab+\");\n    if (!rwops)\n        RWOP_ERR_QUIT(rwops);\n    rwops->close(rwops);\n    unlink(FBASENAME2);\n    printf(\"test2 OK\\n\");\n\n/* test 3 : creation, writing , reading, seeking,\n            test : w mode, r mode, w+ mode\n */\n    rwops = SDL_RWFromFile(FBASENAME1, \"wb\");   /* write only */\n    if (!rwops)\n        RWOP_ERR_QUIT(rwops);\n    if (1 != rwops->write(rwops, \"1234567890\", 10, 1))\n        RWOP_ERR_QUIT(rwops);\n    if (10 != rwops->write(rwops, \"1234567890\", 1, 10))\n        RWOP_ERR_QUIT(rwops);\n    if (7 != rwops->write(rwops, \"1234567\", 1, 7))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->seek(rwops, 0L, RW_SEEK_SET))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->read(rwops, test_buf, 1, 1))\n        RWOP_ERR_QUIT(rwops);   /* we are in write only mode */\n    rwops->close(rwops);\n\n    rwops = SDL_RWFromFile(FBASENAME1, \"rb\");   /* read mode, file must exists */\n    if (!rwops)\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->seek(rwops, 0L, RW_SEEK_SET))\n        RWOP_ERR_QUIT(rwops);\n    if (20 != rwops->seek(rwops, -7, RW_SEEK_END))\n        RWOP_ERR_QUIT(rwops);\n    if (7 != rwops->read(rwops, test_buf, 1, 7))\n        RWOP_ERR_QUIT(rwops);\n    if (SDL_memcmp(test_buf, \"1234567\", 7))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->read(rwops, test_buf, 1, 1))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->read(rwops, test_buf, 10, 100))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->seek(rwops, -27, RW_SEEK_CUR))\n        RWOP_ERR_QUIT(rwops);\n    if (2 != rwops->read(rwops, test_buf, 10, 3))\n        RWOP_ERR_QUIT(rwops);\n    if (SDL_memcmp(test_buf, \"12345678901234567890\", 20))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->write(rwops, test_buf, 1, 1))\n        RWOP_ERR_QUIT(rwops);   /* readonly mode */\n    rwops->close(rwops);\n\n/* test 3: same with w+ mode */\n    rwops = SDL_RWFromFile(FBASENAME1, \"wb+\");  /* write + read + truncation */\n    if (!rwops)\n        RWOP_ERR_QUIT(rwops);\n    if (1 != rwops->write(rwops, \"1234567890\", 10, 1))\n        RWOP_ERR_QUIT(rwops);\n    if (10 != rwops->write(rwops, \"1234567890\", 1, 10))\n        RWOP_ERR_QUIT(rwops);\n    if (7 != rwops->write(rwops, \"1234567\", 1, 7))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->seek(rwops, 0L, RW_SEEK_SET))\n        RWOP_ERR_QUIT(rwops);\n    if (1 != rwops->read(rwops, test_buf, 1, 1))\n        RWOP_ERR_QUIT(rwops);   /* we are in read/write mode */\n    if (0 != rwops->seek(rwops, 0L, RW_SEEK_SET))\n        RWOP_ERR_QUIT(rwops);\n    if (20 != rwops->seek(rwops, -7, RW_SEEK_END))\n        RWOP_ERR_QUIT(rwops);\n    if (7 != rwops->read(rwops, test_buf, 1, 7))\n        RWOP_ERR_QUIT(rwops);\n    if (SDL_memcmp(test_buf, \"1234567\", 7))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->read(rwops, test_buf, 1, 1))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->read(rwops, test_buf, 10, 100))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->seek(rwops, -27, RW_SEEK_CUR))\n        RWOP_ERR_QUIT(rwops);\n    if (2 != rwops->read(rwops, test_buf, 10, 3))\n        RWOP_ERR_QUIT(rwops);\n    if (SDL_memcmp(test_buf, \"12345678901234567890\", 20))\n        RWOP_ERR_QUIT(rwops);\n    rwops->close(rwops);\n    printf(\"test3 OK\\n\");\n\n/* test 4: same in r+ mode */\n    rwops = SDL_RWFromFile(FBASENAME1, \"rb+\");  /* write + read + file must exists, no truncation */\n    if (!rwops)\n        RWOP_ERR_QUIT(rwops);\n    if (1 != rwops->write(rwops, \"1234567890\", 10, 1))\n        RWOP_ERR_QUIT(rwops);\n    if (10 != rwops->write(rwops, \"1234567890\", 1, 10))\n        RWOP_ERR_QUIT(rwops);\n    if (7 != rwops->write(rwops, \"1234567\", 1, 7))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->seek(rwops, 0L, RW_SEEK_SET))\n        RWOP_ERR_QUIT(rwops);\n    if (1 != rwops->read(rwops, test_buf, 1, 1))\n        RWOP_ERR_QUIT(rwops);   /* we are in read/write mode */\n    if (0 != rwops->seek(rwops, 0L, RW_SEEK_SET))\n        RWOP_ERR_QUIT(rwops);\n    if (20 != rwops->seek(rwops, -7, RW_SEEK_END))\n        RWOP_ERR_QUIT(rwops);\n    if (7 != rwops->read(rwops, test_buf, 1, 7))\n        RWOP_ERR_QUIT(rwops);\n    if (SDL_memcmp(test_buf, \"1234567\", 7))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->read(rwops, test_buf, 1, 1))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->read(rwops, test_buf, 10, 100))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->seek(rwops, -27, RW_SEEK_CUR))\n        RWOP_ERR_QUIT(rwops);\n    if (2 != rwops->read(rwops, test_buf, 10, 3))\n        RWOP_ERR_QUIT(rwops);\n    if (SDL_memcmp(test_buf, \"12345678901234567890\", 20))\n        RWOP_ERR_QUIT(rwops);\n    rwops->close(rwops);\n    printf(\"test4 OK\\n\");\n\n/* test5 : append mode */\n    rwops = SDL_RWFromFile(FBASENAME1, \"ab+\");  /* write + read + append */\n    if (!rwops)\n        RWOP_ERR_QUIT(rwops);\n    if (1 != rwops->write(rwops, \"1234567890\", 10, 1))\n        RWOP_ERR_QUIT(rwops);\n    if (10 != rwops->write(rwops, \"1234567890\", 1, 10))\n        RWOP_ERR_QUIT(rwops);\n    if (7 != rwops->write(rwops, \"1234567\", 1, 7))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->seek(rwops, 0L, RW_SEEK_SET))\n        RWOP_ERR_QUIT(rwops);\n\n    if (1 != rwops->read(rwops, test_buf, 1, 1))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->seek(rwops, 0L, RW_SEEK_SET))\n        RWOP_ERR_QUIT(rwops);\n\n    if (20 + 27 != rwops->seek(rwops, -7, RW_SEEK_END))\n        RWOP_ERR_QUIT(rwops);\n    if (7 != rwops->read(rwops, test_buf, 1, 7))\n        RWOP_ERR_QUIT(rwops);\n    if (SDL_memcmp(test_buf, \"1234567\", 7))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->read(rwops, test_buf, 1, 1))\n        RWOP_ERR_QUIT(rwops);\n    if (0 != rwops->read(rwops, test_buf, 10, 100))\n        RWOP_ERR_QUIT(rwops);\n\n    if (27 != rwops->seek(rwops, -27, RW_SEEK_CUR))\n        RWOP_ERR_QUIT(rwops);\n\n    if (0 != rwops->seek(rwops, 0L, RW_SEEK_SET))\n        RWOP_ERR_QUIT(rwops);\n    if (3 != rwops->read(rwops, test_buf, 10, 3))\n        RWOP_ERR_QUIT(rwops);\n    if (SDL_memcmp(test_buf, \"123456789012345678901234567123\", 30))\n        RWOP_ERR_QUIT(rwops);\n    rwops->close(rwops);\n    printf(\"test5 OK\\n\");\n    cleanup();\n    return 0;                   /* all ok */\n}\n"]}