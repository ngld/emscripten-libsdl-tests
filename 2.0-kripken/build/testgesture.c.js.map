{"version":3,"file":"testgesture.c.js","sources":["../SDL-2.0.0/testgesture.c"],"names":[],"mappingskNA;AACA;;;;AAkGA;;AAtHA;;AACA;AAAA;;;;;;;;;;;AAOA;;;;AA0BA;AAGA;AAMA;AAAA;AAqBA;AACA;AAwCA;AANA;AAEA;AACA;;;;AAYA;;;;;;;;AAhFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;AAnCA;;AACA;AAAA;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;AAMA;AACA;AAAA;AAAA;AACA;;;;;AAGA;;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;AA/CA;;;AAmDA;;AAFA;;;AAEA;;;;AA5FA;;;AA4FA;;;;;AA9JA;AASA;AAiBA;AAAA;;;;AAhBA;AAKA;;;AAGA;AACA;AAGA;;AACA;;AAGA;;;AAEA;;;;;;;AAnBA;AAAA;;AAuBA;;AAGA;AAAA;;;AAFA;AAAA;AAAA;AA1CA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AA0CA;AAAA;;;;;;;;;;;;;;;AA9FA;AACA;;;;;;;;;;;;;AAMA;AAAA;AAEA;AAAA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;;;;;;;;;;;AAaA;AAAA;;;;AACA;;;;;;AAAA;AAOA;AAAA;AACA;AATA;;;;;AACA;AAEA;AAAA;;AACA;;;AAAA;AADA;;;AAHA","sourcesContent":["/*\n  Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely.\n*/\n/*  Usage:\n *  Spacebar to begin recording a gesture on all touches.\n *  s to save all touches into \"./gestureSave\"\n *  l to load all touches from \"./gestureSave\"\n */\n\n#include <stdio.h>\n#include <math.h>\n\n#include \"SDL.h\"\n#include \"SDL_touch.h\"\n#include \"SDL_gesture.h\"\n\n/* Make sure we have good macros for printing 32 and 64 bit values */\n#ifndef PRIs32\n#define PRIs32 \"d\"\n#endif\n#ifndef PRIu32\n#define PRIu32 \"u\"\n#endif\n#ifndef PRIs64\n#ifdef __WIN32__\n#define PRIs64 \"I64\"\n#else\n#define PRIs64 \"lld\"\n#endif\n#endif\n#ifndef PRIu64\n#ifdef __WIN32__\n#define PRIu64 \"I64u\"\n#else\n#define PRIu64 \"llu\"\n#endif\n#endif\n\n#define WIDTH 640\n#define HEIGHT 480\n#define BPP 4\n#define DEPTH 32\n\n//MUST BE A POWER OF 2!\n#define EVENT_BUF_SIZE 256\n\n\n#define VERBOSE 0\n\nstatic SDL_Window *window;\nstatic SDL_Event events[EVENT_BUF_SIZE];\nstatic int eventWrite;\n\n\nstatic int colors[7] = {0xFF,0xFF00,0xFF0000,0xFFFF00,0x00FFFF,0xFF00FF,0xFFFFFF};\n\ntypedef struct {\n  float x,y;\n} Point;\n\ntypedef struct {\n  float ang,r;\n  Point p;\n} Knob;\n\nstatic Knob knob;\n\nvoid handler (int sig)\n{\n  SDL_Log (\"exiting...(%d)\", sig);\n  exit (0);\n}\n\nvoid perror_exit (char *error)\n{\n  perror (error);\n  handler (9);\n}\n\nvoid setpix(SDL_Surface *screen, float _x, float _y, unsigned int col)\n{\n  Uint32 *pixmem32;\n  Uint32 colour;\n  Uint8 r,g,b;\n  int x = (int)_x;\n  int y = (int)_y;\n  float a;\n\n  if(x < 0 || x >= screen->w) return;\n  if(y < 0 || y >= screen->h) return;\n\n  pixmem32 = (Uint32*) screen->pixels  + y*screen->pitch/BPP + x;\n\n  SDL_memcpy(&colour,pixmem32,screen->format->BytesPerPixel);\n\n  SDL_GetRGB(colour,screen->format,&r,&g,&b);\n  //r = 0;g = 0; b = 0;\n  a = (float)((col>>24)&0xFF);\n  if(a == 0) a = 0xFF; //Hack, to make things easier.\n  a /= 0xFF;\n  r = (Uint8)(r*(1-a) + ((col>>16)&0xFF)*(a));\n  g = (Uint8)(g*(1-a) + ((col>> 8)&0xFF)*(a));\n  b = (Uint8)(b*(1-a) + ((col>> 0)&0xFF)*(a));\n  colour = SDL_MapRGB( screen->format,r, g, b);\n\n\n  *pixmem32 = colour;\n}\n\nvoid drawLine(SDL_Surface *screen,float x0,float y0,float x1,float y1,unsigned int col) {\n  float t;\n  for(t=0;t<1;t+=(float)(1.f/SDL_max(SDL_fabs(x0-x1),SDL_fabs(y0-y1))))\n    setpix(screen,x1+t*(x0-x1),y1+t*(y0-y1),col);\n}\n\nvoid drawCircle(SDL_Surface* screen,float x,float y,float r,unsigned int c)\n{\n  float tx,ty;\n  float xr;\n  for(ty = (float)-SDL_fabs(r);ty <= (float)SDL_fabs((int)r);ty++) {\n    xr = (float)sqrt(r*r - ty*ty);\n    if(r > 0) { //r > 0 ==> filled circle\n      for(tx=-xr+.5f;tx<=xr-.5;tx++) {\n    setpix(screen,x+tx,y+ty,c);\n      }\n    }\n    else {\n      setpix(screen,x-xr+.5f,y+ty,c);\n      setpix(screen,x+xr-.5f,y+ty,c);\n    }\n  }\n}\n\nvoid drawKnob(SDL_Surface* screen,Knob k) {\n  drawCircle(screen,k.p.x*screen->w,k.p.y*screen->h,k.r*screen->w,0xFFFFFF);\n  drawCircle(screen,(k.p.x+k.r/2*SDL_cosf(k.ang))*screen->w,\n                (k.p.y+k.r/2*SDL_sinf(k.ang))*screen->h,k.r/4*screen->w,0);\n}\n\nvoid DrawScreen(SDL_Surface* screen)\n{\n  int i;\n#if 1\n  SDL_FillRect(screen, NULL, 0);\n#else\n  int x, y;\n  for(y = 0;y < screen->h;y++)\n    for(x = 0;x < screen->w;x++)\n    setpix(screen,(float)x,(float)y,((x%255)<<16) + ((y%255)<<8) + (x+y)%255);\n#endif\n\n  //draw Touch History\n  for(i = eventWrite; i < eventWrite+EVENT_BUF_SIZE; ++i) {\n    const SDL_Event *event = &events[i&(EVENT_BUF_SIZE-1)];\n    float age = (float)(i - eventWrite) / EVENT_BUF_SIZE;\n    float x, y;\n    unsigned int c, col;\n\n    if(event->type == SDL_FINGERMOTION ||\n       event->type == SDL_FINGERDOWN ||\n       event->type == SDL_FINGERUP) {\n      x = event->tfinger.x;\n      y = event->tfinger.y;\n\n      //draw the touch:\n      c = colors[event->tfinger.fingerId%7];\n      col = ((unsigned int)(c*(.1+.85))) | (unsigned int)(0xFF*age)<<24;\n\n      if(event->type == SDL_FINGERMOTION)\n    drawCircle(screen,x*screen->w,y*screen->h,5,col);\n      else if(event->type == SDL_FINGERDOWN)\n    drawCircle(screen,x*screen->w,y*screen->h,-10,col);\n    }\n  }\n\n  if(knob.p.x > 0)\n    drawKnob(screen,knob);\n\n  SDL_UpdateWindowSurface(window);\n}\n\nSDL_Surface* initScreen(int width,int height)\n{\n  if (!window) {\n    window = SDL_CreateWindow(\"Gesture Test\",\n                              SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,\n                              width, height, SDL_WINDOW_RESIZABLE);\n  }\n  if (!window) {\n    return NULL;\n  }\n  return SDL_GetWindowSurface(window);\n}\n\nint main(int argc, char* argv[])\n{\n  SDL_Surface *screen;\n  SDL_Event event;\n  SDL_bool quitting = SDL_FALSE;\n  SDL_RWops *src;\n\n  //gesture variables\n  knob.r = .1f;\n  knob.ang = 0;\n\n  if (SDL_Init(SDL_INIT_VIDEO) < 0 ) return 1;\n\n  if (!(screen = initScreen(WIDTH,HEIGHT)))\n    {\n      SDL_Quit();\n      return 1;\n    }\n\n  while(!quitting) {\n    while(SDL_PollEvent(&event))\n      {\n    //Record _all_ events\n    events[eventWrite & (EVENT_BUF_SIZE-1)] = event;\n    eventWrite++;\n\n    switch (event.type)\n      {\n      case SDL_QUIT:\n        quitting = SDL_TRUE;\n        break;\n      case SDL_KEYDOWN:\n        switch (event.key.keysym.sym)\n          {\n          case SDLK_SPACE:\n        SDL_RecordGesture(-1);\n        break;\n          case SDLK_s:\n        src = SDL_RWFromFile(\"gestureSave\",\"w\");\n        SDL_Log(\"Wrote %i templates\",SDL_SaveAllDollarTemplates(src));\n        SDL_RWclose(src);\n        break;\n          case SDLK_l:\n        src = SDL_RWFromFile(\"gestureSave\",\"r\");\n        SDL_Log(\"Loaded: %i\",SDL_LoadDollarTemplates(-1,src));\n        SDL_RWclose(src);\n        break;\n          case SDLK_ESCAPE:\n        quitting = SDL_TRUE;\n        break;\n        }\n        break;\n      case SDL_WINDOWEVENT:\n            if (event.window.event == SDL_WINDOWEVENT_RESIZED) {\n          if (!(screen = initScreen(event.window.data1, event.window.data2)))\n          {\n        SDL_Quit();\n        return 1;\n          }\n            }\n        break;\n      case SDL_FINGERMOTION:\n#if VERBOSE\n        SDL_Log(\"Finger: %i,x: %i, y: %i\",event.tfinger.fingerId,\n               event.tfinger.x,event.tfinger.y);\n#endif\n        break;\n      case SDL_FINGERDOWN:\n#if VERBOSE\n        SDL_Log(\"Finger: %\"PRIs64\" down - x: %i, y: %i\",\n           event.tfinger.fingerId,event.tfinger.x,event.tfinger.y);\n#endif\n        break;\n      case SDL_FINGERUP:\n#if VERBOSE\n        SDL_Log(\"Finger: %\"PRIs64\" up - x: %i, y: %i\",\n               event.tfinger.fingerId,event.tfinger.x,event.tfinger.y);\n#endif\n        break;\n      case SDL_MULTIGESTURE:\n#if VERBOSE\n        SDL_Log(\"Multi Gesture: x = %f, y = %f, dAng = %f, dR = %f\",\n           event.mgesture.x,\n           event.mgesture.y,\n           event.mgesture.dTheta,\n           event.mgesture.dDist);\n        SDL_Log(\"MG: numDownTouch = %i\",event.mgesture.numFingers);\n#endif\n        knob.p.x = event.mgesture.x;\n        knob.p.y = event.mgesture.y;\n        knob.ang += event.mgesture.dTheta;\n        knob.r += event.mgesture.dDist;\n        break;\n      case SDL_DOLLARGESTURE:\n        SDL_Log(\"Gesture %\"PRIs64\" performed, error: %f\",\n           event.dgesture.gestureId,\n           event.dgesture.error);\n        break;\n      case SDL_DOLLARRECORD:\n        SDL_Log(\"Recorded gesture: %\"PRIs64\"\",event.dgesture.gestureId);\n        break;\n      }\n      }\n    DrawScreen(screen);\n  }\n  SDL_Quit();\n  return 0;\n}\n\n"]}