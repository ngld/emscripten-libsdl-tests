{"version":3,"file":"testcursor.c.js","sources":["../SDL-1.2.15/testcursor.c"],"names":[],"mappingsvCA;AAAA;;AAEA;AAAA;AAAA;AAAA;;;AAqCA;;AAjCA;AAEA;AAAA;;AAGA;AAAA;AAAA;AAAA;AACA;;;AA2BA;;AApFA;AAAA;;;;AAcA;;;;;AAHA;AACA;AAAA;;;;;AAJA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;AAKA;;AAEA;AACA;;AAGA;;AAdA;;;;;;;;AADA;;;;;;;;AAsBA;AAAA;AACA;AAgCA;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;;;AAoBA;;AAjBA;AAAA;;AAGA;AAAA;AAAA;AAAA;AACA;;;AAaA;;AATA;AACA;AAOA;;;AACA;;;;;;;;;AAOA;;;;;AAIA;AAYA;;;;AAZA;;;;;;;;;AAEA;AAAA;;AAGA;;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AAEA","sourcesContent":["#include <stdio.h>\n#include <stdlib.h>\n\n#include \"SDL.h\"\n#ifdef EMSCRIPTEN\n    #include <emscripten.h>\n    void main_loop();\n#endif\n\n/* This is an example 16x16 cursor\n\ttop left :\tblack\n\ttop right : inverted color or black\n\tbottom left: white\n\tbottom right: transparent\n\t(swap left and right for different endianness)\n*/\n\nUint16 cursor_data[16]={\n\t0xffff,\n\t0xffff,\n\t0xffff,\n\t0xffff,\t\n\n\t0xffff,\n\t0xffff,\n\t0xffff,\n\t0xffff,\t\n\n\t0x0000,\n\t0x0000,\n\t0x0000,\n\t0x0000,\n\n\t0x0000,\n\t0x0000,\n\t0x0000,\n\t0x0000\n};\n\nUint16 cursor_mask[16]={\n\t0xff00,\n\t0xff00,\n\t0xff00,\n\t0xff00,\n\n\t0xff00,\n\t0xff00,\n\t0xff00,\n\t0xff00,\n\n\t0xff00,\n\t0xff00,\n\t0xff00,\n\t0xff00,\n\n\t0xff00,\n\t0xff00,\n\t0xff00,\n\t0xff00\n};\n\n/* another test cursor: smaller than 16x16, and with an odd height */\n\nUint8 small_cursor_data[11] = { 0x00, 0x18, 0x08, 0x38, 0x44, 0x54, 0x44, 0x38, 0x20, 0x20, 0x00 };\nUint8 small_cursor_mask[11] = { 0x3C, 0x3C, 0x3C, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x78, 0x70, 0x70 };\n\n/* XPM */\nstatic const char *arrow[] = {\n  /* width height num_colors chars_per_pixel */\n  \"    32    32        3            1\",\n  /* colors */\n  \"X c #000000\",\n  \". c #ffffff\",\n  \"  c None\",\n  /* pixels */\n  \"X                               \",\n  \"XX                              \",\n  \"X.X                             \",\n  \"X..X                            \",\n  \"X...X                           \",\n  \"X....X                          \",\n  \"X.....X                         \",\n  \"X......X                        \",\n  \"X.......X                       \",\n  \"X........X                      \",\n  \"X.....XXXXX                     \",\n  \"X..X..X                         \",\n  \"X.X X..X                        \",\n  \"XX  X..X                        \",\n  \"X    X..X                       \",\n  \"     X..X                       \",\n  \"      X..X                      \",\n  \"      X..X                      \",\n  \"       XX                       \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"0,0\"\n};\n\nstatic SDL_Cursor *create_arrow_cursor()\n{\n  int i, row, col;\n  Uint8 data[4*32];\n  Uint8 mask[4*32];\n  int hot_x, hot_y;\n\n  i = -1;\n  for ( row=0; row<32; ++row ) {\n    for ( col=0; col<32; ++col ) {\n      if ( col % 8 ) {\n        data[i] <<= 1;\n        mask[i] <<= 1;\n      } else {\n        ++i;\n        data[i] = mask[i] = 0;\n      }\n      switch (arrow[4+row][col]) {\n        case 'X':\n          data[i] |= 0x01;\n          mask[i] |= 0x01;\n          break;\n        case '.':\n          mask[i] |= 0x01;\n          break;\n        case ' ':\n          break;\n      }\n    }\n  }\n  sscanf(arrow[4+row], \"%d,%d\", &hot_x, &hot_y);\n  return SDL_CreateCursor(data, mask, 32, 32, hot_x, hot_y);\n}\n\n\nSDL_Cursor *cursor[3];\nSDL_Surface *screen;\nint current;\nint main(int argc, char *argv[])\n{\n\tSDL_bool first_time = SDL_TRUE;\n\n\t/* Load the SDL library */\n\tif ( SDL_Init(SDL_INIT_VIDEO) < 0 ) {\n\t\tfprintf(stderr, \"Couldn't initialize SDL: %s\\n\",SDL_GetError());\n\t\treturn(1);\n\t}\n\n\tscreen = SDL_SetVideoMode(320,200,8,SDL_ANYFORMAT);\n\tif (screen==NULL) {\n\t\tfprintf(stderr, \"Couldn't initialize video mode: %s\\n\",SDL_GetError());\n\t\treturn(1);\n\t}\n\n\tSDL_FillRect(screen, NULL, 0x664422);\n\n\tcursor[0] = SDL_CreateCursor((Uint8 *)cursor_data, (Uint8 *)cursor_mask,\n\t\t16, 16, 8, 8);\n\tif (cursor[0]==NULL) {\n\t\tfprintf(stderr, \"Couldn't initialize test cursor: %s\\n\",SDL_GetError());\n\t\tSDL_Quit();\n\t\treturn(1);\n\t}\n\tcursor[1] = create_arrow_cursor();\n\tif (cursor[1]==NULL) {\n\t\tfprintf(stderr, \"Couldn't initialize arrow cursor: %s\\n\",SDL_GetError());\n\t\tSDL_FreeCursor(cursor[0]);\n\t\tSDL_Quit();\n\t\treturn(1);\n\t}\n\tcursor[2] = SDL_CreateCursor(small_cursor_data, small_cursor_mask,\n\t\t8, 11, 3, 5);\n\tif (cursor[2]==NULL) {\n\t\tfprintf(stderr, \"Couldn't initialize test cursor: %s\\n\",SDL_GetError());\n\t\tSDL_Quit();\n\t\treturn(1);\n\t}\n    \n    current = 0;\n\tSDL_SetCursor(cursor[current]);\n\n#ifndef EMSCRIPTEN\n    SDL_bool quit = SDL_FALSE;\n\n\twhile (!quit) {\n#else\n    emscripten_set_main_loop(&main_loop, 0, 1);\n}\n\nvoid main_loop()\n{\n    SDL_bool quit = SDL_FALSE;\n    \n    // Report success to the test framework to make this test work without user interaction.\n    emscripten_run_script(\"report(true);\");\n#endif\n\t\tSDL_Event\tevent;\n\t\twhile (SDL_PollEvent(&event)) {\n\t\t\tswitch(event.type) {\n\t\t\t\tcase SDL_MOUSEBUTTONDOWN:\n\t\t\t\t\tcurrent = (current + 1)%4;\n                    if(current == 3) {\n                        // Test hiding the cursor\n                        SDL_ShowCursor(0);\n                    } else {\n                        SDL_ShowCursor(1);\n\t\t\t\t        SDL_SetCursor(cursor[current]);\n                    }\n\t\t\t\t\tbreak;\n\t\t\t\tcase SDL_KEYDOWN:\n\t\t\t\t\tif (event.key.keysym.sym == SDLK_ESCAPE) {\n\t\t\t\t\t\tquit = SDL_TRUE;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SDL_QUIT:\n\t\t\t\t\tquit = SDL_TRUE;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n#ifndef EMSCRIPTEN\n\t\tSDL_Flip(screen);\n\t\tSDL_Delay(1);\n\t}\n\n\tSDL_FreeCursor(cursor[0]);\n\tSDL_FreeCursor(cursor[1]);\n\tSDL_FreeCursor(cursor[2]);\n\n\tSDL_Quit();\n\treturn(0);\n#else\n    if(quit) {\n        SDL_FreeCursor(cursor[0]);\n        SDL_FreeCursor(cursor[1]);\n        SDL_FreeCursor(cursor[2]);\n\n        SDL_Quit();\n    }\n#endif\n}\n"]}