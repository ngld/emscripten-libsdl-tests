{"version":3,"file":"graywin.c.js","sources":["../SDL-1.2.15/graywin.c"],"names":[],"mappingskJA;AAAA;AAAA;AAAA;AACA;AAAA;;AAIA;AACA;AACA;AACA;;;;;;;;;AAEA;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;AAIA;AAAA;;;;;;;;;;;;AAIA;AAAA;;;;;;;;;;;AAGA;;;;;;AACA;AAAA;;;;;;;;;AAGA;AAAA;;;;;;;;;AAGA;AAAA;;;;;;;;;AAGA;AAAA;;;;;;;;;AAGA;AAAA;;;;;;;;;;;;AAGA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;;AAFA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;AAKA;AAAA;;AAEA;AAAA;;AAGA;AAOA;;AACA;;;;;;;;AAlIA;AAEA;AAqBA;AApBA;AACA;AACA;;;AALA;AAEA;AAAA;AAQA;AAAA;;;;;;;;;;;;AACA;AACA;AACA;;;;AAGA;AAFA;;;AAJA;AAAA;;;;;;;;;;;;;;;;;;;AANA;AADA;AAAA;;;;;;;;;;;AAmBA;;;AAEA;;;;AAxBA;AAEA;AAAA;AAQA;AAAA;;;;;;;;;;;;AACA;AACA;AACA;;;;AAGA;AAFA;;;AAJA;AAAA;;;;;;;;;;;;;;;;;;;AANA;AADA;AAAA;;;;;;;;;;;AAmBA;;;;AAEA;;;;;AAEA;;;;;AA9BA;AACA;AAAA;AAAA;;;;;;;;;AA6IA;;;;;AAIA;AAEA;AAAA;AAqBA;AAeA;AAAA;;;AAtCA;;;AAEA;;;AAIA;;;;;AAMA;;;;;;;AAKA;AAAA;AACA;AAAA;AAAA;;AAKA;;;;;;;AAIA;;;;;AAQA;;;AAGA;AAAA;;AAKA;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;AAlKA;AAEA;;AACA;AAAA;AAAA;;;AAiBA;;AAdA;AAAA;;;;;;AAcA;;;AARA;AAAA;AACA;AACA;AAHA;;AAKA;;;AAIA;;;;;;;;;;;;;AAzGA;;;AAKA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;AAMA;;;AAIA;;AAIA;;;;AAFA","sourcesContent":["\n/* Simple program:  Fill a colormap with gray and stripe it down the screen */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n#include \"SDL.h\"\n\n#ifdef EMSCRIPTEN\n\t#include <emscripten.h>\n\tvoid main_loop();\n#endif\n\n#ifdef TEST_VGA16 /* Define this if you want to test VGA 16-color video modes */\n#define NUM_COLORS\t16\n#else\n#define NUM_COLORS\t256\n#endif\n\n/* Draw a randomly sized and colored box centered about (X,Y) */\nvoid DrawBox(SDL_Surface *screen, int X, int Y, int width, int height)\n{\n\tstatic unsigned int seeded = 0;\n\tSDL_Rect area;\n\tUint32 color;\n        Uint32 randc;\n\n\t/* Seed the random number generator */\n\tif ( seeded == 0 ) {\n\t\tsrand(time(NULL));\n\t\tseeded = 1;\n\t}\n\n\t/* Get the bounds of the rectangle */\n\tarea.w = (rand()%width);\n\tarea.h = (rand()%height);\n\tarea.x = X-(area.w/2);\n\tarea.y = Y-(area.h/2);\n        randc = (rand()%NUM_COLORS);\n\n        if (screen->format->BytesPerPixel==1)\n        {\n            color = randc;\n        }\n        else\n        {\n            color = SDL_MapRGB(screen->format, randc, randc, randc);\n        }\n\n\t/* Do it! */\n\tSDL_FillRect(screen, &area, color);\n\tif ( screen->flags & SDL_DOUBLEBUF ) {\n\t\tSDL_Flip(screen);\n\t} else {\n\t\tSDL_UpdateRects(screen, 1, &area);\n\t}\n}\n\nvoid DrawBackground(SDL_Surface *screen)\n{\n\tint i, j, k;\n\tUint8  *buffer;\n\tUint16 *buffer16;\n        Uint16 color;\n        Uint8  gradient;\n\n\t/* Set the surface pixels and refresh! */\n\t/* Use two loops in case the surface is double-buffered (both sides) */\n\n\tfor ( j=0; j<2; ++j ) {\n\t\tif ( SDL_LockSurface(screen) < 0 ) {\n\t\t\tfprintf(stderr, \"Couldn't lock display surface: %s\\n\",\n\t\t\t\t\t\t\t\tSDL_GetError());\n\t\t\treturn;\n\t\t}\n\t\tbuffer = (Uint8 *)screen->pixels;\n\n\t\tif (screen->format->BytesPerPixel!=2) {\n\t\t\tfor ( i=0; i<screen->h; ++i ) {\n\t\t\t\tmemset(buffer,(i*(NUM_COLORS-1))/screen->h, screen->w * screen->format->BytesPerPixel);\n\t\t\t\tbuffer += screen->pitch;\n\t\t\t}\n\t\t}\n                else\n                {\n\t\t\tfor ( i=0; i<screen->h; ++i ) {\n\t\t\t\tgradient=((i*(NUM_COLORS-1))/screen->h);\n                                color = SDL_MapRGB(screen->format, gradient, gradient, gradient);\n                                buffer16=(Uint16*)buffer;\n                                for (k=0; k<screen->w; k++)\n                                {\n                                   *(buffer16+k)=color;\n                                }\n\t\t\t\tbuffer += screen->pitch;\n\t\t\t}\n                }\n\n\t\tSDL_UnlockSurface(screen);\n\t\tif ( screen->flags & SDL_DOUBLEBUF ) {\n\t\t\tSDL_Flip(screen);\n\t\t} else {\n\t\t\tSDL_UpdateRect(screen, 0, 0, 0, 0);\n                        break;\n\t\t}\n\t}\n}\n\nSDL_Surface *CreateScreen(Uint16 w, Uint16 h, Uint8 bpp, Uint32 flags)\n{\n\tSDL_Surface *screen;\n\tint i;\n\tSDL_Color palette[NUM_COLORS];\n\n\t/* Set the video mode */\n\tscreen = SDL_SetVideoMode(w, h, bpp, flags);\n\tif ( screen == NULL ) {\n\t\tfprintf(stderr, \"Couldn't set display mode: %s\\n\",\n\t\t\t\t\t\t\tSDL_GetError());\n\t\treturn(NULL);\n\t}\n\tfprintf(stderr, \"Screen is in %s mode\\n\",\n\t\t(screen->flags & SDL_FULLSCREEN) ? \"fullscreen\" : \"windowed\");\n\n\tif (bpp==8) {\n\t\t/* Set a gray colormap, reverse order from white to black */\n\t\tfor ( i=0; i<NUM_COLORS; ++i ) {\n\t\t\tpalette[i].r = (NUM_COLORS-1)-i * (256 / NUM_COLORS);\n\t\t\tpalette[i].g = (NUM_COLORS-1)-i * (256 / NUM_COLORS);\n\t\t\tpalette[i].b = (NUM_COLORS-1)-i * (256 / NUM_COLORS);\n\t\t}\n\t\tSDL_SetColors(screen, palette, 0, NUM_COLORS);\n\t}\n\n\treturn(screen);\n}\n\nUint32 videoflags;\nSDL_Surface *screen;\nint width, height, bpp;\n\nint main(int argc, char *argv[])\n{\n\t/* Initialize SDL */\n\tif ( SDL_Init(SDL_INIT_VIDEO) < 0 ) {\n\t\tfprintf(stderr, \"Couldn't initialize SDL: %s\\n\",SDL_GetError());\n\t\texit(1);\n\t}\n\n\t/* See if we try to get a hardware colormap */\n\twidth = 640;\n\theight = 480;\n\tbpp = 8;\n\tvideoflags = SDL_SWSURFACE;\n\twhile ( argc > 1 ) {\n\t\t--argc;\n\t\tif ( argv[argc-1] && (strcmp(argv[argc-1], \"-width\") == 0) ) {\n\t\t\twidth = atoi(argv[argc]);\n\t\t\t--argc;\n\t\t} else\n\t\tif ( argv[argc-1] && (strcmp(argv[argc-1], \"-height\") == 0) ) {\n\t\t\theight = atoi(argv[argc]);\n\t\t\t--argc;\n\t\t} else\n\t\tif ( argv[argc-1] && (strcmp(argv[argc-1], \"-bpp\") == 0) ) {\n\t\t\tbpp = atoi(argv[argc]);\n\t\t\t--argc;\n\t\t} else\n\t\tif ( argv[argc] && (strcmp(argv[argc], \"-hw\") == 0) ) {\n\t\t\tvideoflags |= SDL_HWSURFACE;\n\t\t} else\n\t\tif ( argv[argc] && (strcmp(argv[argc], \"-hwpalette\") == 0) ) {\n\t\t\tvideoflags |= SDL_HWPALETTE;\n\t\t} else\n\t\tif ( argv[argc] && (strcmp(argv[argc], \"-flip\") == 0) ) {\n\t\t\tvideoflags |= SDL_DOUBLEBUF;\n\t\t} else\n\t\tif ( argv[argc] && (strcmp(argv[argc], \"-noframe\") == 0) ) {\n\t\t\tvideoflags |= SDL_NOFRAME;\n\t\t} else\n\t\tif ( argv[argc] && (strcmp(argv[argc], \"-resize\") == 0) ) {\n\t\t\tvideoflags |= SDL_RESIZABLE;\n\t\t} else\n\t\tif ( argv[argc] && (strcmp(argv[argc], \"-fullscreen\") == 0) ) {\n\t\t\tvideoflags |= SDL_FULLSCREEN;\n\t\t} else {\n\t\t\tfprintf(stderr, \"Usage: %s [-width] [-height] [-bpp] [-hw] [-hwpalette] [-flip] [-noframe] [-fullscreen] [-resize]\\n\",\n\t\t\t\t\t\t\t\targv[0]);\n\t\t\texit(1);\n\t\t}\n\t}\n\n\t/* Set a video mode */\n\tscreen = CreateScreen(width, height, bpp, videoflags);\n\tif ( screen == NULL ) {\n\t\texit(2);\n\t}\n        \n        DrawBackground(screen);\n\n#ifndef EMSCRIPTEN\n\t/* Wait for a keystroke */\n\tdone = 0;\n\twhile ( !done && SDL_WaitEvent(&event) ) {\n#else\n\temscripten_set_main_loop(&main_loop, 0, 1);\n}\n\nvoid main_loop()\n{\n\tint done = 0;\n\tSDL_Event event;\n\t\n\t// Report success to the test framework to make this test work without user interaction.\n\temscripten_run_script(\"report(true);\");\n\t\n\twhile (SDL_PollEvent(&event)) {\n#endif\n\t\tswitch (event.type) {\n\t\t\tcase SDL_MOUSEBUTTONDOWN:\n\t\t\t\tDrawBox(screen, event.button.x, event.button.y, width, height);\n\t\t\t\tbreak;\n\t\t\tcase SDL_KEYDOWN:\n\t\t\t\t/* Ignore ALT-TAB for windows */\n\t\t\t\tif ( (event.key.keysym.sym == SDLK_LALT) ||\n\t\t\t\t     (event.key.keysym.sym == SDLK_TAB) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/* Center the mouse on <SPACE> */\n\t\t\t\tif ( event.key.keysym.sym == SDLK_SPACE ) {\n\t\t\t\t\tSDL_WarpMouse(width/2, height/2);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/* Toggle fullscreen mode on <RETURN> */\n\t\t\t\tif ( event.key.keysym.sym == SDLK_RETURN ) {\n\t\t\t\t\tvideoflags ^= SDL_FULLSCREEN;\n\t\t\t\t\tscreen = CreateScreen(\n\t\t\t\t\t\tscreen->w, screen->h,\n\t\t\t\t\t\tscreen->format->BitsPerPixel,\n\t\t\t\t\t\t\t\tvideoflags);\n\t\t\t\t\tif ( screen == NULL ) {\n\t\t\t\t\t\tfprintf(stderr,\n\t\t\t\t\t\"Couldn't toggle fullscreen mode\\n\");\n\t\t\t\t\t\tdone = 1;\n\t\t\t\t\t}\n                                        DrawBackground(screen);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/* Any other key quits the application... */\n\t\t\tcase SDL_QUIT:\n\t\t\t\tdone = 1;\n\t\t\t\tbreak;\n\t\t\tcase SDL_VIDEOEXPOSE:\n\t\t\t\tDrawBackground(screen);\n\t\t\t\tbreak;\n\t\t\tcase SDL_VIDEORESIZE:\n\t\t\t\t\tscreen = CreateScreen(\n\t\t\t\t\t\tevent.resize.w, event.resize.h,\n\t\t\t\t\t\tscreen->format->BitsPerPixel,\n\t\t\t\t\t\t\t\tvideoflags);\n\t\t\t\t\tif ( screen == NULL ) {\n\t\t\t\t\t\tfprintf(stderr,\n\t\t\t\t\t\"Couldn't resize video mode\\n\");\n\t\t\t\t\t\tdone = 1;\n\t\t\t\t\t}\n\t\t\t\t\tDrawBackground(screen);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n#ifndef EMSCRIPTEN\n\tSDL_Quit();\n\treturn(0);\n#else\n\tif(done) {\n\t\tSDL_Quit();\n\t}\n#endif\n}\n"]}