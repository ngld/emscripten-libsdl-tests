{"version":3,"file":"testdyngl.c.js","sources":["../SDL-1.2.15/testdyngl.c"],"names":[],"mappingssourcesContent":["/*\n * Small SDL example to demonstrate dynamically loading \n * OpenGL lib and functions\n *\n * (FYI it was supposed to look like snow in the wind or something...)\n *\n * Compile with :\n * gcc testdyngl.c `sdl-config --libs --cflags` -o testdyngl -DHAVE_OPENGL\n *\n * You can specify a different OpenGL lib on the command line, i.e. :\n * ./testdyngl  /usr/X11R6/lib/libGL.so.1.2\n * or\n * ./testdyngl  /usr/lib/libGL.so.1.0.4496\n *\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n\n#include \"SDL.h\"\n\n#ifdef __MACOS__\n#define HAVE_OPENGL\n#endif\n\n#ifdef HAVE_OPENGL\n\n#include \"SDL_opengl.h\"\n\n/* Call this instead of exit(), so we can clean up SDL: atexit() is evil. */\nstatic void quit(int rc)\n{\n\tSDL_Quit();\n\texit(rc);\n}\n\nvoid* get_funcaddr(const char* p)\n{\n\tvoid* f=SDL_GL_GetProcAddress(p);\n\tif (f)\n\t{\n\t\treturn f;\n\t}\n\telse\n\t{\n\t\tprintf(\"Unable to get function pointer for %s\\n\",p);\n\t\tquit(1);\n\t}\n\treturn NULL;\n}\n\ntypedef struct\n{\n\tvoid(APIENTRY*glBegin)(GLenum);\n\tvoid(APIENTRY*glEnd)();\n\tvoid(APIENTRY*glVertex3f)(GLfloat, GLfloat, GLfloat);\n\tvoid(APIENTRY*glClearColor)(GLfloat, GLfloat, GLfloat, GLfloat);\n\tvoid(APIENTRY*glClear)(GLbitfield);\n\tvoid(APIENTRY*glDisable)(GLenum);\n\tvoid(APIENTRY*glEnable)(GLenum);\n\tvoid(APIENTRY*glColor4ub)(GLubyte,GLubyte,GLubyte,GLubyte);\n\tvoid(APIENTRY*glPointSize)(GLfloat);\n\tvoid(APIENTRY*glHint)(GLenum,GLenum);\n\tvoid(APIENTRY*glBlendFunc)(GLenum,GLenum);\n\tvoid(APIENTRY*glMatrixMode)(GLenum);\n\tvoid(APIENTRY*glLoadIdentity)();\n\tvoid(APIENTRY*glOrtho)(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);\n\tvoid(APIENTRY*glRotatef)(GLfloat,GLfloat,GLfloat,GLfloat);\n\tvoid(APIENTRY*glViewport)(GLint,GLint,GLsizei,GLsizei);\n\tvoid(APIENTRY*glFogf)(GLenum,GLfloat);\n}\nglfuncs;\n\nvoid init_glfuncs(glfuncs* f)\n{\n\tf->glBegin=get_funcaddr(\"glBegin\");\n\tf->glEnd=get_funcaddr(\"glEnd\");\n\tf->glVertex3f=get_funcaddr(\"glVertex3f\");\n\tf->glClearColor=get_funcaddr(\"glClearColor\");\n\tf->glClear=get_funcaddr(\"glClear\");\n\tf->glDisable=get_funcaddr(\"glDisable\");\n\tf->glEnable=get_funcaddr(\"glEnable\");\n\tf->glColor4ub=get_funcaddr(\"glColor4ub\");\n\tf->glPointSize=get_funcaddr(\"glPointSize\");\n\tf->glHint=get_funcaddr(\"glHint\");\n\tf->glBlendFunc=get_funcaddr(\"glBlendFunc\");\n\tf->glMatrixMode=get_funcaddr(\"glMatrixMode\");\n\tf->glLoadIdentity=get_funcaddr(\"glLoadIdentity\");\n\tf->glOrtho=get_funcaddr(\"glOrtho\");\n\tf->glRotatef=get_funcaddr(\"glRotatef\");\n\tf->glViewport=get_funcaddr(\"glViewport\");\n\tf->glFogf=get_funcaddr(\"glFogf\");\n}\n\n#define NB_PIXELS 1000\n\nint main(int argc,char *argv[])\n{\n\tglfuncs f;\n\tint i;\n\tSDL_Event event;\n\tint done=0;\n\tGLfloat pixels[NB_PIXELS*3];\n\tconst char *gl_library = NULL; /* Use the default GL library */\n\n\tif (argv[1]) {\n\t\tgl_library = argv[1];\n\t}\n\t\n\tif (SDL_Init(SDL_INIT_VIDEO)<0)\n\t{\n\t\tprintf(\"Unable to init SDL : %s\\n\",SDL_GetError());\n\t\treturn(1);\n\t}\n\n\tif (SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER,1)<0)\n\t{\n\t\tprintf(\"Unable to set GL attribute : %s\\n\",SDL_GetError());\n\t\tquit(1);\n\t}\n\t\n\tif (SDL_GL_LoadLibrary(gl_library)<0)\n\t{\n\t\tprintf(\"Unable to dynamically open GL lib : %s\\n\",SDL_GetError());\n\t\tquit(1);\n\t}\n\n\tif (SDL_SetVideoMode(640,480,0,SDL_OPENGL)==NULL)\n\t{\n\t\tprintf(\"Unable to open video mode : %s\\n\",SDL_GetError());\n\t\tquit(1);\n\t}\n\n\t/* Set the window manager title bar */\n\tSDL_WM_SetCaption( \"SDL Dynamic OpenGL Loading Test\", \"testdyngl\" );\n\n\tinit_glfuncs(&f);\n\n\tfor(i=0;i<NB_PIXELS;i++)\n\t{\n\t\tpixels[3*i]=rand()%250-125;\n\t\tpixels[3*i+1]=rand()%250-125;\n\t\tpixels[3*i+2]=rand()%250-125;\n\t}\n\t\n\tf.glViewport(0,0,640,480);\n\t\n\tf.glMatrixMode(GL_PROJECTION);\n\tf.glLoadIdentity();\n\tf.glOrtho(-100,100,-100,100,-500,500);\n\t\n\tf.glMatrixMode(GL_MODELVIEW);\n\tf.glLoadIdentity();\n\t\n\tf.glEnable(GL_DEPTH_TEST);\n\tf.glDisable(GL_TEXTURE_2D);\n\tf.glEnable(GL_BLEND);\n\tf.glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n\t\n\tf.glClearColor(0.0f,0.0f,0.0f,0.0f);\n\tf.glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);\n\t\n\tf.glEnable(GL_POINT_SMOOTH);\n\tf.glHint(GL_POINT_SMOOTH_HINT,GL_NICEST);\n\tf.glPointSize(5.0f);\n\tf.glEnable(GL_FOG);\n\tf.glFogf(GL_FOG_START,-500);\n\tf.glFogf(GL_FOG_END,500);\n\tf.glFogf(GL_FOG_DENSITY,0.005);\n\t\n\tdo\n\t{\n\t\tf.glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);\n\t\t\n\t\tf.glRotatef(2.0,1.0,1.0,1.0);\n\t\tf.glRotatef(1.0,0.0,1.0,1.0);\n\t\t\n\t\tf.glColor4ub(255,255,255,255);\n\t\tf.glBegin(GL_POINTS);\n\t\tfor(i=0;i<NB_PIXELS;i++)\n\t\t{\n\t\t\tf.glVertex3f(pixels[3*i],pixels[3*i+1],pixels[3*i+2]);\n\t\t}\n\t\tf.glEnd();\n\t\tSDL_GL_SwapBuffers();\n\n\t\twhile(SDL_PollEvent(&event))\n\t\t{\n\t\t\tif(event.type & SDL_KEYDOWN)\n\t\t\t\tdone=1;\n\t\t}\n\n\t\tSDL_Delay(20);\n\t}\n\twhile(!done);\n\t\n\tSDL_Quit();\n\treturn 0;\n}\n\n#else /* HAVE_OPENGL */\n\nint main(int argc, char *argv[])\n{\n\tprintf(\"No OpenGL support on this system\\n\");\n\treturn 1;\n}\n\n#endif /* HAVE_OPENGL */\n"]}