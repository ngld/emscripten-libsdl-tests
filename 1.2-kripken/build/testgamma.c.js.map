{"version":3,"file":"testgamma.c.js","sources":["../SDL-1.2.15/testgamma.c"],"names":[],"mappingsqFA;;AAIA;AACA;AAAA;AAAA;;;AA0GA;;AArGA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;AACA;;;AAIA;AAIA;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;;;AAeA;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;AAIA;;AAMA;AAKA;;;;;;;;;;;;;;;AALA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;AACA;;;;AAFA;AA3JA;;;AAEA;AAIA;AALA;;AADA;;;AAEA;AAIA;AALA;;AA6JA;;;AAGA;AAAA;AACA;AACA;;;AAIA;AACA;;;;;;;AAEA;AAEA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/JA;AACA;AACA;AACA;AAEA;;;AA2BA;;;;;;;;AAzBA;AAAA;;;;;AACA;;;;AAIA;AAAA;;;;;AACA;;;;;AAIA;AAAA;;;;;AACA;;;;;AAIA;;;;;AAGA;;;;;;;;;AAGA;;;;AAvBA;AAAA;;;;;;;;;;;AA2BA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxDA;AACA","sourcesContent":["\n/* Bring up a window and manipulate the gamma on it */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n\n#include \"SDL.h\"\n\n/* Call this instead of exit(), so we can clean up SDL: atexit() is evil. */\nstatic void quit(int rc)\n{\n\tSDL_Quit();\n\texit(rc);\n}\n\n/* Turn a normal gamma value into an appropriate gamma ramp */\nvoid CalculateGamma(double gamma, Uint16 *ramp)\n{\n\tint i, value;\n\n\tgamma = 1.0 / gamma;\n\tfor ( i=0; i<256; ++i ) {\n\t\tvalue = (int)(pow((double)i/256.0, gamma)*65535.0 + 0.5);\n\t\tif ( value > 65535 ) {\n\t\t\tvalue = 65535;\n\t\t}\n\t\tramp[i] = (Uint16)value;\n\t}\n}\n\n/* This can be used as a general routine for all of the test programs */\nint get_video_args(char *argv[], int *w, int *h, int *bpp, Uint32 *flags)\n{\n\tint i;\n\n\t*w = 640;\n\t*h = 480;\n\t*bpp = 0;\n\t*flags = SDL_SWSURFACE;\n\n\tfor ( i=1; argv[i]; ++i ) {\n\t\tif ( strcmp(argv[i], \"-width\") == 0 ) {\n\t\t\tif ( argv[i+1] ) {\n\t\t\t\t*w = atoi(argv[++i]);\n\t\t\t}\n\t\t} else\n\t\tif ( strcmp(argv[i], \"-height\") == 0 ) {\n\t\t\tif ( argv[i+1] ) {\n\t\t\t\t*h = atoi(argv[++i]);\n\t\t\t}\n\t\t} else\n\t\tif ( strcmp(argv[i], \"-bpp\") == 0 ) {\n\t\t\tif ( argv[i+1] ) {\n\t\t\t\t*bpp = atoi(argv[++i]);\n\t\t\t}\n\t\t} else\n\t\tif ( strcmp(argv[i], \"-fullscreen\") == 0 ) {\n\t\t\t*flags |= SDL_FULLSCREEN;\n\t\t} else\n\t\tif ( strcmp(argv[i], \"-hw\") == 0 ) {\n\t\t\t*flags |= SDL_HWSURFACE;\n\t\t} else\n\t\tif ( strcmp(argv[i], \"-hwpalette\") == 0 ) {\n\t\t\t*flags |= SDL_HWPALETTE;\n\t\t} else\n\t\t\tbreak;\n\t}\n\treturn i;\n}\n\nint main(int argc, char *argv[])\n{\n\tSDL_Surface *screen;\n\tSDL_Surface *image;\n\tfloat gamma;\n\tint i;\n\tint w, h, bpp;\n\tUint32 flags;\n\tUint16 ramp[256];\n\tUint16 red_ramp[256];\n\tUint32 then, timeout;\n\n\t/* Check command line arguments */\n\targv += get_video_args(argv, &w, &h, &bpp, &flags);\n\n\t/* Initialize SDL */\n\tif ( SDL_Init(SDL_INIT_VIDEO) < 0 ) {\n\t\tfprintf(stderr,\n\t\t\t\"Couldn't initialize SDL: %s\\n\", SDL_GetError());\n\t\treturn(1);\n\t}\n\n\t/* Initialize the display, always use hardware palette */\n\tscreen = SDL_SetVideoMode(w, h, bpp, flags | SDL_HWPALETTE);\n\tif ( screen == NULL ) {\n\t\tfprintf(stderr, \"Couldn't set %dx%d video mode: %s\\n\",\n\t\t\t\t\t\tw, h, SDL_GetError());\n\t\tquit(1);\n\t}\n\n\t/* Set the window manager title bar */\n\tSDL_WM_SetCaption(\"SDL gamma test\", \"testgamma\");\n\n\t/* Set the desired gamma, if any */\n\tgamma = 1.0f;\n\tif ( *argv ) {\n\t\tgamma = (float)atof(*argv);\n\t}\n\tif ( SDL_SetGamma(gamma, gamma, gamma) < 0 ) {\n\t\tfprintf(stderr, \"Unable to set gamma: %s\\n\", SDL_GetError());\n\t\tquit(1);\n\t}\n\n#if 0 /* This isn't supported.  Integrating the gamma ramps isn't exact */\n\t/* See what gamma was actually set */\n\tfloat real[3];\n\tif ( SDL_GetGamma(&real[0], &real[1], &real[2]) < 0 ) {\n\t\tprintf(\"Couldn't get gamma: %s\\n\", SDL_GetError());\n\t} else {\n\t\tprintf(\"Set gamma values: R=%2.2f, G=%2.2f, B=%2.2f\\n\",\n\t\t\treal[0], real[1], real[2]);\n\t}\n#endif\n\n\t/* Do all the drawing work */\n\timage = SDL_LoadBMP(\"sample.bmp\");\n\tif ( image ) {\n\t\tSDL_Rect dst;\n\n\t\tdst.x = (screen->w - image->w)/2;\n\t\tdst.y = (screen->h - image->h)/2;\n\t\tdst.w = image->w;\n\t\tdst.h = image->h;\n\t\tSDL_BlitSurface(image, NULL, screen, &dst);\n\t\tSDL_UpdateRects(screen, 1, &dst);\n\t}\n\n\t/* Wait a bit, handling events */\n\tthen = SDL_GetTicks();\n\ttimeout = (5*1000);\n\twhile ( (SDL_GetTicks()-then) < timeout ) {\n\t\tSDL_Event event;\n\n\t\twhile ( SDL_PollEvent(&event) ) {\n\t\t\tswitch (event.type) {\n\t\t\t    case SDL_QUIT:\t/* Quit now */\n\t\t\t\ttimeout = 0;\n\t\t\t\tbreak;\n\t\t\t    case SDL_KEYDOWN:\n\t\t\t\tswitch (event.key.keysym.sym) {\n\t\t\t\t    case SDLK_SPACE:\t/* Go longer.. */\n\t\t\t\t\ttimeout += (5*1000);\n\t\t\t\t\tbreak;\n\t\t\t\t    case SDLK_UP:\n\t\t\t\t\tgamma += 0.2f;\n\t\t\t\t\tSDL_SetGamma(gamma, gamma, gamma);\n\t\t\t\t\tbreak;\n\t\t\t\t    case SDLK_DOWN:\n\t\t\t\t\tgamma -= 0.2f;\n\t\t\t\t\tSDL_SetGamma(gamma, gamma, gamma);\n\t\t\t\t\tbreak;\n\t\t\t\t    case SDLK_ESCAPE:\n\t\t\t\t\ttimeout = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t    default:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Perform a gamma flash to red using color ramps */\n\twhile ( gamma < 10.0 ) {\n\t\t/* Increase the red gamma and decrease everything else... */\n\t\tgamma += 0.1f;\n\t\tCalculateGamma(gamma, red_ramp);\n\t\tCalculateGamma(1.0/gamma, ramp);\n\t\tSDL_SetGammaRamp(red_ramp, ramp, ramp);\n\t}\n\t/* Finish completely red */\n\tmemset(red_ramp, 255, sizeof(red_ramp));\n\tmemset(ramp, 0, sizeof(ramp));\n\tSDL_SetGammaRamp(red_ramp, ramp, ramp);\n\n\t/* Now fade out to black */\n\tfor ( i=(red_ramp[0] >> 8); i >= 0; --i ) {\n\t\tmemset(red_ramp, i, sizeof(red_ramp));\n\t\tSDL_SetGammaRamp(red_ramp, NULL, NULL);\n\t}\n\tSDL_Delay(1*1000);\n\n\tSDL_Quit();\n\treturn(0);\n}\n"]}