{"version":3,"file":"testplatform.c.js","sources":["../SDL-1.2.15/testplatform.c"],"names":[],"mappingsvDA;AAAA;AAzGA;AAIA;AAyBA;AAAA;AAgBA;AAAA;AASA;AAAA;;AAyGA;;AACA","sourcesContent":["\n#include <stdio.h>\n\n#include \"SDL.h\"\n#include \"SDL_endian.h\"\n#include \"SDL_cpuinfo.h\"\n\n/*\n * Watcom C flags these as Warning 201: \"Unreachable code\" if you just\n *  compare them directly, so we push it through a function to keep the\n *  compiler quiet.  --ryan.\n */\nstatic int badsize(size_t sizeoftype, size_t hardcodetype)\n{\n    return sizeoftype != hardcodetype;\n}\n\nint TestTypes(SDL_bool verbose)\n{\n\tint error = 0;\n\n\tif ( badsize(sizeof(Uint8), 1) ) {\n\t\tif ( verbose )\n\t\t\tprintf(\"sizeof(Uint8) != 1, instead = %lu\\n\",\n\t\t\t\t\t\t\t\t(unsigned long) sizeof(Uint8));\n\t\t++error;\n\t}\n\tif ( badsize(sizeof(Uint16), 2) ) {\n\t\tif ( verbose )\n\t\t\tprintf(\"sizeof(Uint16) != 2, instead = %lu\\n\",\n\t\t\t\t\t\t\t\t(unsigned long) sizeof(Uint16));\n\t\t++error;\n\t}\n\tif ( badsize(sizeof(Uint32), 4) ) {\n\t\tif ( verbose )\n\t\t\tprintf(\"sizeof(Uint32) != 4, instead = %lu\\n\",\n\t\t\t\t\t\t\t\t(unsigned long) sizeof(Uint32));\n\t\t++error;\n\t}\n#ifdef SDL_HAS_64BIT_TYPE\n\tif ( badsize(sizeof(Uint64), 8) ) {\n\t\tif ( verbose )\n\t\t\tprintf(\"sizeof(Uint64) != 8, instead = %lu\\n\",\n\t\t\t\t\t\t\t\t(unsigned long) sizeof(Uint64));\n\t\t++error;\n\t}\n#else\n\tif ( verbose ) {\n\t\tprintf(\"WARNING: No 64-bit datatype on this platform\\n\");\n\t}\n#endif\n\tif ( verbose && !error )\n\t\tprintf(\"All data types are the expected size.\\n\");\n\n\treturn( error ? 1 : 0 );\n}\n\nint TestEndian(SDL_bool verbose)\n{\n\tint error = 0;\n\tUint16 value = 0x1234;\n\tint real_byteorder;\n\tUint16 value16 = 0xCDAB;\n\tUint16 swapped16 = 0xABCD;\n\tUint32 value32 = 0xEFBEADDE;\n\tUint32 swapped32 = 0xDEADBEEF;\n#ifdef SDL_HAS_64BIT_TYPE\n\tUint64 value64, swapped64;\n\tvalue64 = 0xEFBEADDE;\n\tvalue64 <<= 32;\n\tvalue64 |= 0xCDAB3412;\n\tswapped64 = 0x1234ABCD;\n\tswapped64 <<= 32;\n\tswapped64 |= 0xDEADBEEF;\n#endif\n\n\tif ( verbose ) {\n\t\tprintf(\"Detected a %s endian machine.\\n\",\n\t\t\t(SDL_BYTEORDER == SDL_LIL_ENDIAN) ? \"little\" : \"big\");\n\t}\n\tif ( (*((char *)&value) >> 4) == 0x1 ) {\n\t\treal_byteorder = SDL_BIG_ENDIAN;\n\t} else {\n\t\treal_byteorder = SDL_LIL_ENDIAN;\n\t}\n\tif ( real_byteorder != SDL_BYTEORDER ) {\n\t\tif ( verbose ) {\n\t\t\tprintf(\"Actually a %s endian machine!\\n\",\n\t\t\t\t(real_byteorder == SDL_LIL_ENDIAN) ? \"little\" : \"big\");\n\t\t}\n\t\t++error;\n\t}\n\tif ( verbose ) {\n\t\tprintf(\"Value 16 = 0x%X, swapped = 0x%X\\n\", value16, SDL_Swap16(value16));\n\t}\n\tif ( SDL_Swap16(value16) != swapped16 ) {\n\t\tif ( verbose ) {\n\t\t\tprintf(\"16 bit value swapped incorrectly!\\n\");\n\t\t}\n\t\t++error;\n\t}\n\tif ( verbose ) {\n\t\tprintf(\"Value 32 = 0x%X, swapped = 0x%X\\n\", value32, SDL_Swap32(value32));\n\t}\n\tif ( SDL_Swap32(value32) != swapped32 ) {\n\t\tif ( verbose ) {\n\t\t\tprintf(\"32 bit value swapped incorrectly!\\n\");\n\t\t}\n\t\t++error;\n\t}\n#ifdef SDL_HAS_64BIT_TYPE\n\tif ( verbose ) {\n#ifdef _MSC_VER\n\t\tprintf(\"Value 64 = 0x%I64X, swapped = 0x%I64X\\n\", value64, SDL_Swap64(value64));\n#else\n\t\tprintf(\"Value 64 = 0x%llX, swapped = 0x%llX\\n\", (unsigned long long) value64, (unsigned long long) SDL_Swap64(value64));\n#endif\n\t}\n\tif ( SDL_Swap64(value64) != swapped64 ) {\n\t\tif ( verbose ) {\n\t\t\tprintf(\"64 bit value swapped incorrectly!\\n\");\n\t\t}\n\t\t++error;\n\t}\n#endif\n\treturn( error ? 1 : 0 );\n}\n\n\nint TestCPUInfo(SDL_bool verbose)\n{\n\tif ( verbose ) {\n\t\tprintf(\"RDTSC %s\\n\", SDL_HasRDTSC() ? \"detected\" : \"not detected\");\n\t\tprintf(\"MMX %s\\n\", SDL_HasMMX() ? \"detected\" : \"not detected\");\n\t\tprintf(\"MMX Ext %s\\n\", SDL_HasMMXExt() ? \"detected\" : \"not detected\");\n\t\tprintf(\"3DNow %s\\n\", SDL_Has3DNow() ? \"detected\" : \"not detected\");\n\t\tprintf(\"3DNow Ext %s\\n\", SDL_Has3DNowExt() ? \"detected\" : \"not detected\");\n\t\tprintf(\"SSE %s\\n\", SDL_HasSSE() ? \"detected\" : \"not detected\");\n\t\tprintf(\"SSE2 %s\\n\", SDL_HasSSE2() ? \"detected\" : \"not detected\");\n\t\tprintf(\"AltiVec %s\\n\", SDL_HasAltiVec() ? \"detected\" : \"not detected\");\n\t}\n\treturn(0);\n}\n\nint main(int argc, char *argv[])\n{\n\tSDL_bool verbose = SDL_TRUE;\n\tint status = 0;\n\n\tif ( argv[1] && (SDL_strcmp(argv[1], \"-q\") == 0) ) {\n\t\tverbose = SDL_FALSE;\n\t}\n\tif ( verbose ) {\n\t\tprintf(\"This system is running %s\\n\",\n#if __AIX__\n\t\t\t\"AIX\"\n#elif __HAIKU__\n/* Haiku must appear here before BeOS, since it also defines __BEOS__ */\n\t\t\t\"Haiku\"\n#elif __BEOS__\n\t\t\t\"BeOS\"\n#elif __BSDI__\n\t\t\t\"BSDI\"\n#elif __DREAMCAST__\n\t\t\t\"Dreamcast\"\n#elif __FREEBSD__\n\t\t\t\"FreeBSD\"\n#elif __HPUX__\n\t\t\t\"HP-UX\"\n#elif __IRIX__\n\t\t\t\"Irix\"\n#elif __LINUX__\n\t\t\t\"Linux\"\n#elif __MINT__\n\t\t\t\"Atari MiNT\"\n#elif __MACOS__\n\t\t\t\"MacOS Classic\"\n#elif __MACOSX__\n\t\t\t\"Mac OS X\"\n#elif __NETBSD__\n\t\t\t\"NetBSD\"\n#elif __OPENBSD__\n\t\t\t\"OpenBSD\"\n#elif __OS2__\n\t\t\t\"OS/2\"\n#elif __OSF__\n\t\t\t\"OSF/1\"\n#elif __QNXNTO__\n\t\t\t\"QNX Neutrino\"\n#elif __RISCOS__\n\t\t\t\"RISC OS\"\n#elif __SOLARIS__\n\t\t\t\"Solaris\"\n#elif __WIN32__\n#ifdef _WIN32_WCE\n\t\t\t\"Windows CE\"\n#else\n\t\t\t\"Windows\"\n#endif\n#else\n\t\t\t\"an unknown operating system! (see SDL_platform.h)\"\n#endif\n\t\t);\n\t}\n\n\tstatus += TestTypes(verbose);\n\tstatus += TestEndian(verbose);\n\tstatus += TestCPUInfo(verbose);\n\treturn status;\n}\n"]}