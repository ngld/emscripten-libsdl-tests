{"version":3,"file":"testwm.c.js","sources":["../SDL-1.2.15/testwm.c"],"names":[],"mappingsmFA;;AA5EA;AACA;;;;;;;;;;;;;AAGA;AAAA;;;AACA;AAAA;;;;;;;;AAKA;AAAA;;;;;;;;;AAKA;AAAA;;;;;;;;;;;;;;;AAKA;;;;;;;;;AAKA;;;;;;;;;;;;;;AAKA;AAAA;;;;;;;;;;;;;;;;;;;;;AASA;AAIA;;AAFA;;;AAGA;;AAGA;AACA;AAAA;AAGA;AAGA;AACA;;AAGA;;AAFA;AAAA;;;AAMA;;;AAaA;;;AACA;;;;;;;AArWA;AAGA;;AAEA;AAAA;AAAA;AAAA;;;AA6CA;;AAhCA;;AACA;AAAA;AACA;;;AA8BA;;AAzBA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;;;AAaA;;AAVA;AACA;;AAEA;;;;;;;;;AAAA;AACA;;;;AAEA;AAAA;;;AAJA;;;;;;;;;;;;;;AADA;;;;;;;;;;AAOA;;;AAEA;;;;;;;;;AA1FA;;AAEA;AAAA;AACA;AAAA;AAAA;;;AA4BA;;AAzBA;AAAA;;;AAKA;AAAA;AACA;AACA;AAHA;;AAKA;;AAEA;AACA;AAAA;AAAA;;;AAaA;;AATA;AAAA;;AACA;AAAA;AAEA;;;;;AAFA;AADA;AAAA;;;;;;;;;;AAKA;AACA;;;AAGA;;;;;;;AAmXA;;;;;AAKA;AAEA;AAAA;;AAFA;;;;;AAEA;AAAA;AAAA;AAEA;;;;;AAUA;AAAA;;;;;;;;AAJA;AACA;;AAJA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7aA;AACA","sourcesContent":["\n/* Test out the window manager interaction functions */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"SDL.h\"\n\n#ifdef EMSCRIPTEN\n\t#include <emscripten.h>\n\tvoid main_loop();\n#endif\n\n/* Is the cursor visible? */\nstatic int visible = 1;\n\nstatic Uint8  video_bpp;\nstatic Uint32 video_flags;\n\n/* Call this instead of exit(), so we can clean up SDL: atexit() is evil. */\nstatic void quit(int rc)\n{\n\tSDL_Quit();\n\texit(rc);\n}\n\nint SetVideoMode(int w, int h)\n{\n\tSDL_Surface *screen;\n\tint i;\n\tUint8 *buffer;\n\tSDL_Color palette[256];\n\n\tscreen = SDL_SetVideoMode(w, h, video_bpp, video_flags);\n\tif (  screen == NULL ) {\n\t\tfprintf(stderr, \"Couldn't set %dx%dx%d video mode: %s\\n\",\n\t\t\t\t\tw, h, video_bpp, SDL_GetError());\n\t\treturn(-1);\n\t}\n\tprintf(\"Running in %s mode\\n\", screen->flags & SDL_FULLSCREEN ?\n\t\t\t\t\t\t\"fullscreen\" : \"windowed\");\n\n\t/* Set the surface pixels and refresh! */\n\tfor ( i=0; i<256; ++i ) {\n\t\tpalette[i].r = 255-i;\n\t\tpalette[i].g = 255-i;\n\t\tpalette[i].b = 255-i;\n\t}\n\tSDL_SetColors(screen, palette, 0, 256);\n\tif ( SDL_LockSurface(screen) < 0 ) {\n\t\tfprintf(stderr, \"Couldn't lock display surface: %s\\n\",\n\t\t\t\t\t\t\tSDL_GetError());\n\t\treturn(-1);\n\t}\n\tbuffer = (Uint8 *)screen->pixels;\n\tfor ( i=0; i<screen->h; ++i ) {\n\t\tmemset(buffer,(i*255)/screen->h,\n\t\t\t\tscreen->w*screen->format->BytesPerPixel);\n\t\tbuffer += screen->pitch;\n\t}\n\tSDL_UnlockSurface(screen);\n\tSDL_UpdateRect(screen, 0, 0, 0, 0);\n\n\treturn(0);\n}\n\nSDL_Surface *LoadIconSurface(char *file, Uint8 **maskp)\n{\n\tSDL_Surface *icon;\n\tUint8       *pixels;\n\tUint8       *mask;\n\tint          mlen, i, j;\n\n\t*maskp = NULL;\n\n\t/* Load the icon surface */\n\ticon = SDL_LoadBMP(file);\n\tif ( icon == NULL ) {\n\t\tfprintf(stderr, \"Couldn't load %s: %s\\n\", file, SDL_GetError());\n\t\treturn(NULL);\n\t}\n\n\t/* Check width and height \n\tif ( (icon->w%8) != 0 ) {\n\t\tfprintf(stderr, \"Icon width must be a multiple of 8!\\n\");\n\t\tSDL_FreeSurface(icon);\n\t\treturn(NULL);\n\t}\n*/\n    \n    \n\tif ( icon->format->palette == NULL ) {\n\t\tfprintf(stderr, \"Icon must have a palette!\\n\");\n\t\tSDL_FreeSurface(icon);\n\t\treturn(NULL);\n\t}\n\n\t/* Set the colorkey */\n\tSDL_SetColorKey(icon, SDL_SRCCOLORKEY, *((Uint8 *)icon->pixels));\n\n\t/* Create the mask */\n\tpixels = (Uint8 *)icon->pixels;\n\tprintf(\"Transparent pixel: (%d,%d,%d)\\n\",\n\t\t\t\ticon->format->palette->colors[*pixels].r,\n\t\t\t\ticon->format->palette->colors[*pixels].g,\n\t\t\t\ticon->format->palette->colors[*pixels].b);\n\tmlen = (icon->w*icon->h + 7) / 8;\n\tmask = (Uint8 *)malloc(mlen);\n\tif ( mask == NULL ) {\n\t\tfprintf(stderr, \"Out of memory!\\n\");\n\t\tSDL_FreeSurface(icon);\n\t\treturn(NULL);\n\t}\n\tmemset(mask, 0, mlen);\n\tfor ( i=0; i < icon->h; i++)\n        for (j=0; j < icon->w; j++) {\n            int pindex = i * icon->pitch + j;\n            int mindex = i * icon->w + j;\n            if ( pixels[pindex] != *pixels )\n                mask[mindex>>3] |= 1 << (7 - (mindex & 7));\n        }\n\t*maskp = mask;\n\treturn(icon);\n}\n\nvoid HotKey_ToggleFullScreen(void)\n{\n\tSDL_Surface *screen;\n\n\tscreen = SDL_GetVideoSurface();\n\tif ( SDL_WM_ToggleFullScreen(screen) ) {\n\t\tprintf(\"Toggled fullscreen mode - now %s\\n\",\n\t\t    (screen->flags&SDL_FULLSCREEN) ? \"fullscreen\" : \"windowed\");\n\t} else {\n\t\tprintf(\"Unable to toggle fullscreen mode\\n\");\n\t\tvideo_flags ^= SDL_FULLSCREEN;\n\t\tSetVideoMode(screen->w, screen->h);\n\t}\n}\n\nvoid HotKey_ToggleGrab(void)\n{\n\tSDL_GrabMode mode;\n\n\tprintf(\"Ctrl-G: toggling input grab!\\n\");\n\tmode = SDL_WM_GrabInput(SDL_GRAB_QUERY);\n\tif ( mode == SDL_GRAB_ON ) {\n\t\tprintf(\"Grab was on\\n\");\n\t} else {\n\t\tprintf(\"Grab was off\\n\");\n\t}\n\tmode = SDL_WM_GrabInput(mode ? SDL_GRAB_OFF : SDL_GRAB_ON);\n\tif ( mode == SDL_GRAB_ON ) {\n\t\tprintf(\"Grab is now on\\n\");\n\t} else {\n\t\tprintf(\"Grab is now off\\n\");\n\t}\n}\n\nvoid HotKey_Iconify(void)\n{\n\tprintf(\"Ctrl-Z: iconifying window!\\n\");\n\tSDL_WM_IconifyWindow();\n}\n\nvoid HotKey_Quit(void)\n{\n\tSDL_Event event;\n\n\tprintf(\"Posting internal quit request\\n\");\n\tevent.type = SDL_USEREVENT;\n\tSDL_PushEvent(&event);\n}\n\nstatic void print_modifiers(void)\n{\n\tint mod;\n\tprintf(\" modifiers:\");\n\tmod = SDL_GetModState();\n\tif(!mod) {\n\t\tprintf(\" (none)\");\n\t\treturn;\n\t}\n\tif(mod & KMOD_LSHIFT)\n\t\tprintf(\" LSHIFT\");\n\tif(mod & KMOD_RSHIFT)\n\t\tprintf(\" RSHIFT\");\n\tif(mod & KMOD_LCTRL)\n\t\tprintf(\" LCTRL\");\n\tif(mod & KMOD_RCTRL)\n\t\tprintf(\" RCTRL\");\n\tif(mod & KMOD_LALT)\n\t\tprintf(\" LALT\");\n\tif(mod & KMOD_RALT)\n\t\tprintf(\" RALT\");\n\tif(mod & KMOD_LMETA)\n\t\tprintf(\" LMETA\");\n\tif(mod & KMOD_RMETA)\n\t\tprintf(\" RMETA\");\n\tif(mod & KMOD_NUM)\n\t\tprintf(\" NUM\");\n\tif(mod & KMOD_CAPS)\n\t\tprintf(\" CAPS\");\n\tif(mod & KMOD_MODE)\n\t\tprintf(\" MODE\");\n}\n\nstatic void PrintKey(const SDL_keysym *sym, int pressed)\n{\n\t/* Print the keycode, name and state */\n\tif ( sym->sym ) {\n\t\tprintf(\"Key %s:  %d-%s \", pressed ?  \"pressed\" : \"released\",\n\t\t\t\t\tsym->sym, SDL_GetKeyName(sym->sym));\n\t} else {\n\t\tprintf(\"Unknown Key (scancode = %d) %s \", sym->scancode,\n\t\t\t\t\tpressed ?  \"pressed\" : \"released\");\n\t}\n\n\t/* Print the translated character, if one exists */\n\tif ( sym->unicode ) {\n\t\t/* Is it a control-character? */\n\t\tif ( sym->unicode < ' ' ) {\n\t\t\tprintf(\" (^%c)\", sym->unicode+'@');\n\t\t} else {\n#ifdef UNICODE\n\t\t\tprintf(\" (%c)\", sym->unicode);\n#else\n\t\t\t/* This is a Latin-1 program, so only show 8-bits */\n\t\t\tif ( !(sym->unicode & 0xFF00) )\n\t\t\t\tprintf(\" (%c)\", sym->unicode);\n\t\t\telse\n\t\t\t\tprintf(\" (0x%X)\", sym->unicode);\n#endif\n\t\t}\n\t}\n\tprint_modifiers();\n\tprintf(\"\\n\");\n}\n\nint SDLCALL FilterEvents(void *userdata, const SDL_Event *event)\n{\n\tstatic int reallyquit = 0;\n\n\tswitch (event->type) {\n\n\t\tcase SDL_ACTIVEEVENT:\n\t\t\t/* See what happened */\n\t\t\tprintf(\"App %s \",\n\t\t\t\tevent->active.gain ? \"gained\" : \"lost\");\n\t\t\tif ( event->active.state & SDL_APPACTIVE )\n\t\t\t\tprintf(\"active \");\n\t\t\tif ( event->active.state & SDL_APPINPUTFOCUS )\n\t\t\t\tprintf(\"input \");\n\t\t\tif ( event->active.state & SDL_APPMOUSEFOCUS )\n\t\t\t\tprintf(\"mouse \");\n\t\t\tprintf(\"focus\\n\");\n\n\t\t\t/* See if we are iconified or restored */\n\t\t\tif ( event->active.state & SDL_APPACTIVE ) {\n\t\t\t\tprintf(\"App has been %s\\n\",\n\t\t\t\t\tevent->active.gain ?\n\t\t\t\t\t\t \"restored\" : \"iconified\");\n\t\t\t}\n\t\t\treturn(0);\n\n\t\t/* We want to toggle visibility on buttonpress */\n\t\tcase SDL_MOUSEBUTTONDOWN:\n\t\tcase SDL_MOUSEBUTTONUP:\n\t\t\tif ( event->button.state == SDL_PRESSED ) {\n\t\t\t\tvisible = !visible;\n\t\t\t\tSDL_ShowCursor(visible);\n\t\t\t}\n\t\t\tprintf(\"Mouse button %d has been %s\\n\",\n\t\t\t\tevent->button.button,\n\t\t\t\t(event->button.state == SDL_PRESSED) ?\n\t\t\t\t\t\t\"pressed\" : \"released\");\n\t\t\treturn(0);\n\n\t\t/* Show relative mouse motion */\n\t\tcase SDL_MOUSEMOTION:\n#if 0\n\t\t\tprintf(\"Mouse motion: {%d,%d} (%d,%d)\\n\",\n\t\t\t\tevent->motion.x, event->motion.y,\n\t\t\t\tevent->motion.xrel, event->motion.yrel);\n#endif\n\t\t\treturn(0);\n\n\t\tcase SDL_KEYDOWN:\n\t\t\tPrintKey(&event->key.keysym, 1);\n\t\t\tif ( event->key.keysym.sym == SDLK_ESCAPE ) {\n\t\t\t\tHotKey_Quit();\n\t\t\t}\n\t\t\tif ( (event->key.keysym.sym == SDLK_g) &&\n\t\t\t     (event->key.keysym.mod & KMOD_CTRL) ) {\n\t\t\t\tHotKey_ToggleGrab();\n\t\t\t}\n\t\t\tif ( (event->key.keysym.sym == SDLK_z) &&\n\t\t\t     (event->key.keysym.mod & KMOD_CTRL) ) {\n\t\t\t\tHotKey_Iconify();\n\t\t\t}\n\t\t\tif ( (event->key.keysym.sym == SDLK_RETURN) &&\n\t\t\t     (event->key.keysym.mod & KMOD_ALT) ) {\n\t\t\t\tHotKey_ToggleFullScreen();\n\t\t\t}\n\t\t\treturn(0);\n\n\t\tcase SDL_KEYUP:\n\t\t\tPrintKey(&event->key.keysym, 0);\n\t\t\treturn(0);\n\n\t\t/* Pass the video resize event through .. */\n\t\tcase SDL_VIDEORESIZE:\n\t\t\treturn(1);\n\n\t\t/* This is important!  Queue it if we want to quit. */\n\t\tcase SDL_QUIT:\n\t\t\tif ( ! reallyquit ) {\n\t\t\t\treallyquit = 1;\n\t\t\t\tprintf(\"Quit requested\\n\");\n\t\t\t\treturn(0);\n\t\t\t}\n\t\t\tprintf(\"Quit demanded\\n\");\n\t\t\treturn(1);\n\n\t\t/* This will never happen because events queued directly\n\t\t   to the event queue are not filtered.\n\t\t */\n\t\tcase SDL_USEREVENT:\n\t\t\treturn(1);\n\n\t\t/* Drop all other events */\n\t\tdefault:\n\t\t\treturn(0);\n\t}\n}\n\nint main(int argc, char *argv[])\n{\n\tSDL_Event event;\n\tchar *title;\n\tSDL_Surface *icon;\n\tUint8 *icon_mask;\n\tint parsed;\n\tint w, h;\n\n\tif ( SDL_Init(SDL_INIT_VIDEO) < 0 ) {\n\t\tfprintf(stderr,\n\t\t\t\"Couldn't initialize SDL: %s\\n\", SDL_GetError());\n\t\treturn(1);\n\t}\n\n\t/* Check command line arguments */\n\tw = 640;\n\th = 480;\n\tvideo_bpp = 8;\n\tvideo_flags = SDL_SWSURFACE;\n\tparsed = 1;\n\twhile ( parsed ) {\n\t\tif ( (argc >= 2) && (strcmp(argv[1], \"-fullscreen\") == 0) ) {\n\t\t\tvideo_flags |= SDL_FULLSCREEN;\n\t\t\targc -= 1;\n\t\t\targv += 1;\n\t\t} else\n\t\tif ( (argc >= 2) && (strcmp(argv[1], \"-resize\") == 0) ) {\n\t\t\tvideo_flags |= SDL_RESIZABLE;\n\t\t\targc -= 1;\n\t\t\targv += 1;\n\t\t} else\n\t\tif ( (argc >= 2) && (strcmp(argv[1], \"-noframe\") == 0) ) {\n\t\t\tvideo_flags |= SDL_NOFRAME;\n\t\t\targc -= 1;\n\t\t\targv += 1;\n\t\t} else\n\t\tif ( (argc >= 3) && (strcmp(argv[1], \"-width\") == 0) ) {\n\t\t\tw = atoi(argv[2]);\n\t\t\targc -= 2;\n\t\t\targv += 2;\n\t\t} else\n\t\tif ( (argc >= 3) && (strcmp(argv[1], \"-height\") == 0) ) {\n\t\t\th = atoi(argv[2]);\n\t\t\targc -= 2;\n\t\t\targv += 2;\n\t\t} else\n\t\tif ( (argc >= 3) && (strcmp(argv[1], \"-bpp\") == 0) ) {\n\t\t\tvideo_bpp = atoi(argv[2]);\n\t\t\targc -= 2;\n\t\t\targv += 2;\n\t\t} else {\n\t\t\tparsed = 0;\n\t\t}\n\t}\n\n\t/* Set the icon -- this must be done before the first mode set */\n\ticon = LoadIconSurface(\"icon.bmp\", &icon_mask);\n\tif ( icon != NULL ) {\n\t\tSDL_WM_SetIcon(icon, icon_mask);\n\t}\n\tif ( icon_mask != NULL )\n\t\tfree(icon_mask);\n\n\t/* Set the title bar */\n\tif ( argv[1] == NULL )\n\t\ttitle = \"Testing  1.. 2.. 3...\";\n\telse\n\t\ttitle = argv[1];\n\tSDL_WM_SetCaption(title, \"testwm\");\n\n\t/* See if it's really set */\n\tSDL_WM_GetCaption(&title, NULL);\n\tif ( title )\n\t\tprintf(\"Title was set to: %s\\n\", title);\n\telse\n\t\tprintf(\"No window title was set!\\n\");\n\n\t/* Initialize the display */\n\tif ( SetVideoMode(w, h) < 0 ) {\n\t\tquit(1);\n\t}\n\t\n\tint userdata = 1;\n\n\t/* Set an event filter that discards everything but QUIT */\n\t// TODO: Is it necessary to implement this?\n\t//SDL_SetEventFilter(FilterEvents, ((void*)&userdata));\n\n#ifndef EMSCRIPTEN\n\t/* Loop, waiting for QUIT */\n\twhile ( SDL_WaitEvent(&event) ) {\n#else\n\temscripten_set_main_loop(&main_loop, 0, 1);\n}\n\nvoid main_loop()\n{\n\t// Report success to the test framework to make this test work without user interaction.\n\temscripten_run_script(\"report(true);\");\n\t\n\tSDL_Event event;\n\twhile ( SDL_PollEvent(&event)) {\n#endif\n\t\tswitch (event.type) {\n\t\t\tcase SDL_VIDEORESIZE:\n\t\t\t\tprintf(\"Got a resize event: %dx%d\\n\",\n\t\t\t\t       event.resize.w, event.resize.h);\n\t\t\t\tSetVideoMode(event.resize.w, event.resize.h);\n\t\t\t\tbreak;\n\t\t\tcase SDL_USEREVENT:\n\t\t\t\tprintf(\"Handling internal quit request\\n\");\n\t\t\t\t/* Fall through to the quit handler */\n\t\t\tcase SDL_QUIT:\n\t\t\t\tprintf(\"Bye bye..\\n\");\n\t\t\t\tquit(0);\n\t\t\tdefault:\n\t\t\t\t/* This should never happen */\n\t\t\t\tprintf(\"Warning: Event %d wasn't filtered\\n\",\n\t\t\t\t\t\t\t\tevent.type);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n#ifndef EMSCRIPTEN\n\tprintf(\"SDL_WaitEvent() error: %s\\n\", SDL_GetError());\n\tSDL_Quit();\n\treturn(255);\n#endif\n}\n"]}