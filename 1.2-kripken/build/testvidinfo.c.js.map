{"version":3,"file":"testvidinfo.c.js","sources":["../SDL-1.2.15/testvidinfo.c"],"names":[],"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","sourcesContent":["\n/* Simple program -- figure out what kind of video display we have */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"SDL.h\"\n\n#define NUM_BLITS\t10\n#define NUM_UPDATES\t500\n\n#define FLAG_MASK\t(SDL_HWSURFACE | SDL_FULLSCREEN | SDL_DOUBLEBUF | \\\n                         SDL_SRCCOLORKEY | SDL_SRCALPHA | SDL_RLEACCEL  | \\\n                         SDL_RLEACCELOK)\n\nvoid PrintFlags(Uint32 flags)\n{\n\tprintf(\"0x%8.8x\", (flags & FLAG_MASK));\n\tif ( flags & SDL_HWSURFACE ) {\n\t\tprintf(\" SDL_HWSURFACE\");\n\t} else {\n\t\tprintf(\" SDL_SWSURFACE\");\n\t}\n\tif ( flags & SDL_FULLSCREEN ) {\n\t\tprintf(\" | SDL_FULLSCREEN\");\n\t}\n\tif ( flags & SDL_DOUBLEBUF ) {\n\t\tprintf(\" | SDL_DOUBLEBUF\");\n\t}\n\tif ( flags & SDL_SRCCOLORKEY ) {\n\t\tprintf(\" | SDL_SRCCOLORKEY\");\n\t}\n\tif ( flags & SDL_SRCALPHA ) {\n\t\tprintf(\" | SDL_SRCALPHA\");\n\t}\n\tif ( flags & SDL_RLEACCEL ) {\n\t\tprintf(\" | SDL_RLEACCEL\");\n\t}\n\tif ( flags & SDL_RLEACCELOK ) {\n\t\tprintf(\" | SDL_RLEACCELOK\");\n\t}\n}\n\nint RunBlitTests(SDL_Surface *screen, SDL_Surface *bmp, int blitcount)\n{\n\tint i, j;\n\tint maxx;\n\tint maxy;\n\tSDL_Rect dst;\n\n\tmaxx = (int)screen->w - bmp->w + 1;\n\tmaxy = (int)screen->h - bmp->h + 1;\n\tfor ( i = 0; i < NUM_UPDATES; ++i ) {\n\t\tfor ( j = 0; j < blitcount; ++j ) {\n\t\t\tif ( maxx ) {\n\t\t\t\tdst.x = rand() % maxx;\n\t\t\t} else {\n\t\t\t\tdst.x = 0;\n\t\t\t}\n\t\t\tif ( maxy ) {\n\t\t\t\tdst.y = rand() % maxy;\n\t\t\t} else {\n\t\t\t\tdst.y = 0;\n\t\t\t}\n\t\t\tdst.w = bmp->w;\n\t\t\tdst.h = bmp->h;\n\t\t\tSDL_BlitSurface(bmp, NULL, screen, &dst);\n\t\t}\n\t\tSDL_Flip(screen);\n\t}\n\n\treturn i;\n}\n\nint RunModeTests(SDL_Surface *screen)\n{\n\tUint32 then, now;\n\tUint32 frames;\n\tfloat seconds;\n\tint i;\n\tUint8 r, g, b;\n\tSDL_Surface *bmp, *bmpcc, *tmp;\n\tSDL_Event event;\n\n\twhile ( SDL_PollEvent(&event) ) {\n\t\tif ( event.type == SDL_KEYDOWN )\n\t\t\treturn 0;\n\t}\n\n\t/* First test fills and screen update speed */\n\tprintf(\"Running color fill and fullscreen update test\\n\");\n\tthen = SDL_GetTicks();\n\tframes = 0;\n\tfor ( i = 0; i < 256; ++i ) {\n\t\tr = i;\n\t\tg = 0;\n\t\tb = 0;\n\t\tSDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, r, g, b));\n\t\tSDL_Flip(screen);\n\t\t++frames;\n\t}\n\tfor ( i = 0; i < 256; ++i ) {\n\t\tr = 0;\n\t\tg = i;\n\t\tb = 0;\n\t\tSDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, r, g, b));\n\t\tSDL_Flip(screen);\n\t\t++frames;\n\t}\n\tfor ( i = 0; i < 256; ++i ) {\n\t\tr = 0;\n\t\tg = 0;\n\t\tb = i;\n\t\tSDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, r, g, b));\n\t\tSDL_Flip(screen);\n\t\t++frames;\n\t}\n\tnow = SDL_GetTicks();\n\tseconds = (float)(now - then) / 1000.0f;\n\tif ( seconds > 0.0f ) {\n\t\tprintf(\"%d fills and flips in %2.2f seconds, %2.2f FPS\\n\", frames, seconds, (float)frames / seconds);\n\t} else {\n\t\tprintf(\"%d fills and flips in zero seconds!n\", frames);\n\t}\n\n        /* clear the screen after fill test */\n        SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 0, 0, 0));\n\tSDL_Flip(screen);\n\n\twhile ( SDL_PollEvent(&event) ) {\n\t\tif ( event.type == SDL_KEYDOWN )\n\t\t\treturn 0;\n\t}\n\n        /* run the generic blit test */\n\tbmp = SDL_LoadBMP(\"sample.bmp\");\n\tif ( ! bmp ) {\n\t\tprintf(\"Couldn't load sample.bmp: %s\\n\", SDL_GetError());\n\t\treturn 0;\n\t}\n\tprintf(\"Running freshly loaded blit test: %dx%d at %d bpp, flags: \",\n\t\tbmp->w, bmp->h, bmp->format->BitsPerPixel);\n\tPrintFlags(bmp->flags);\n\tprintf(\"\\n\");\n\tthen = SDL_GetTicks();\n\tframes = RunBlitTests(screen, bmp, NUM_BLITS);\n\tnow = SDL_GetTicks();\n\tseconds = (float)(now - then) / 1000.0f;\n\tif ( seconds > 0.0f ) {\n\t\tprintf(\"%d blits / %d updates in %2.2f seconds, %2.2f FPS\\n\", NUM_BLITS*frames, frames, seconds, (float)frames / seconds);\n\t} else {\n\t\tprintf(\"%d blits / %d updates in zero seconds!\\n\", NUM_BLITS*frames, frames);\n\t}\n\n        /* clear the screen after blit test */\n        SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 0, 0, 0));\n\tSDL_Flip(screen);\n\n\twhile ( SDL_PollEvent(&event) ) {\n\t\tif ( event.type == SDL_KEYDOWN )\n\t\t\treturn 0;\n\t}\n\n        /* run the colorkeyed blit test */\n\tbmpcc = SDL_LoadBMP(\"sample.bmp\");\n\tif ( ! bmpcc ) {\n\t\tprintf(\"Couldn't load sample.bmp: %s\\n\", SDL_GetError());\n\t\treturn 0;\n\t}\n\tprintf(\"Running freshly loaded cc blit test: %dx%d at %d bpp, flags: \",\n\t\tbmpcc->w, bmpcc->h, bmpcc->format->BitsPerPixel);\n        SDL_SetColorKey(bmpcc, SDL_SRCCOLORKEY | SDL_RLEACCEL, *(Uint8 *)bmpcc->pixels);\n\n\tPrintFlags(bmpcc->flags);\n\tprintf(\"\\n\");\n\tthen = SDL_GetTicks();\n\tframes = RunBlitTests(screen, bmpcc, NUM_BLITS);\n\tnow = SDL_GetTicks();\n\tseconds = (float)(now - then) / 1000.0f;\n\tif ( seconds > 0.0f ) {\n\t\tprintf(\"%d cc blits / %d updates in %2.2f seconds, %2.2f FPS\\n\", NUM_BLITS*frames, frames, seconds, (float)frames / seconds);\n\t} else {\n\t\tprintf(\"%d cc blits / %d updates in zero seconds!\\n\", NUM_BLITS*frames, frames);\n\t}\n\n        /* clear the screen after cc blit test */\n        SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 0, 0, 0));\n\tSDL_Flip(screen);\n\n\twhile ( SDL_PollEvent(&event) ) {\n\t\tif ( event.type == SDL_KEYDOWN )\n\t\t\treturn 0;\n\t}\n\n        /* run the generic blit test */\n\ttmp = bmp;\n\tbmp = SDL_DisplayFormat(bmp);\n\tSDL_FreeSurface(tmp);\n\tif ( ! bmp ) {\n\t\tprintf(\"Couldn't convert sample.bmp: %s\\n\", SDL_GetError());\n\t\treturn 0;\n\t}\n\tprintf(\"Running display format blit test: %dx%d at %d bpp, flags: \",\n\t\tbmp->w, bmp->h, bmp->format->BitsPerPixel);\n\tPrintFlags(bmp->flags);\n\tprintf(\"\\n\");\n\tthen = SDL_GetTicks();\n\tframes = RunBlitTests(screen, bmp, NUM_BLITS);\n\tnow = SDL_GetTicks();\n\tseconds = (float)(now - then) / 1000.0f;\n\tif ( seconds > 0.0f ) {\n\t\tprintf(\"%d blits / %d updates in %2.2f seconds, %2.2f FPS\\n\", NUM_BLITS*frames, frames, seconds, (float)frames / seconds);\n\t} else {\n\t\tprintf(\"%d blits / %d updates in zero seconds!\\n\", NUM_BLITS*frames, frames);\n\t}\n\n        /* clear the screen after blit test */\n        SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 0, 0, 0));\n\tSDL_Flip(screen);\n\n\twhile ( SDL_PollEvent(&event) ) {\n\t\tif ( event.type == SDL_KEYDOWN )\n\t\t\treturn 0;\n\t}\n\n        /* run the colorkeyed blit test */\n\ttmp = bmpcc;\n\tbmpcc = SDL_DisplayFormat(bmpcc);\n\tSDL_FreeSurface(tmp);\n\tif ( ! bmpcc ) {\n\t\tprintf(\"Couldn't convert sample.bmp: %s\\n\", SDL_GetError());\n\t\treturn 0;\n\t}\n\tprintf(\"Running display format cc blit test: %dx%d at %d bpp, flags: \",\n\t\tbmpcc->w, bmpcc->h, bmpcc->format->BitsPerPixel);\n\tPrintFlags(bmpcc->flags);\n\tprintf(\"\\n\");\n\tthen = SDL_GetTicks();\n\tframes = RunBlitTests(screen, bmpcc, NUM_BLITS);\n\tnow = SDL_GetTicks();\n\tseconds = (float)(now - then) / 1000.0f;\n\tif ( seconds > 0.0f ) {\n\t\tprintf(\"%d cc blits / %d updates in %2.2f seconds, %2.2f FPS\\n\", NUM_BLITS*frames, frames, seconds, (float)frames / seconds);\n\t} else {\n\t\tprintf(\"%d cc blits / %d updates in zero seconds!\\n\", NUM_BLITS*frames, frames);\n\t}\n\n        /* clear the screen after cc blit test */\n        SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 0, 0, 0));\n\tSDL_Flip(screen);\n\n\twhile ( SDL_PollEvent(&event) ) {\n\t\tif ( event.type == SDL_KEYDOWN )\n\t\t\treturn 0;\n\t}\n\n        /* run the alpha blit test only if screen bpp>8 */\n        if (bmp->format->BitsPerPixel>8)\n        {\n\t\tSDL_FreeSurface(bmp);\n                bmp = SDL_LoadBMP(\"sample.bmp\");\n\t\tSDL_SetAlpha(bmp, SDL_SRCALPHA, 85); /* 85 - 33% alpha */\n\t\ttmp = bmp;\n\t\tbmp = SDL_DisplayFormat(bmp);\n\t\tSDL_FreeSurface(tmp);\n\t\tif ( ! bmp ) {\n\t\t\tprintf(\"Couldn't convert sample.bmp: %s\\n\", SDL_GetError());\n\t\t\treturn 0;\n\t\t}\n\t\tprintf(\"Running display format alpha blit test: %dx%d at %d bpp, flags: \",\n\t\t\tbmp->w, bmp->h, bmp->format->BitsPerPixel);\n\t\tPrintFlags(bmp->flags);\n\t\tprintf(\"\\n\");\n\t\tthen = SDL_GetTicks();\n\t\tframes = RunBlitTests(screen, bmp, NUM_BLITS);\n\t\tnow = SDL_GetTicks();\n\t\tseconds = (float)(now - then) / 1000.0f;\n\t\tif ( seconds > 0.0f ) {\n\t\t\tprintf(\"%d alpha blits / %d updates in %2.2f seconds, %2.2f FPS\\n\", NUM_BLITS*frames, frames, seconds, (float)frames / seconds);\n\t\t} else {\n\t\t\tprintf(\"%d alpha blits / %d updates in zero seconds!\\n\", NUM_BLITS*frames, frames);\n\t\t}\n\t}\n\n        /* clear the screen after alpha blit test */\n        SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 0, 0, 0));\n\tSDL_Flip(screen);\n\n\twhile ( SDL_PollEvent(&event) ) {\n\t\tif ( event.type == SDL_KEYDOWN )\n\t\t\treturn 0;\n\t}\n\n        /* run the cc+alpha blit test only if screen bpp>8 */\n        if (bmp->format->BitsPerPixel>8)\n        {\n\t\tSDL_FreeSurface(bmpcc);\n                bmpcc = SDL_LoadBMP(\"sample.bmp\");\n\t\tSDL_SetAlpha(bmpcc, SDL_SRCALPHA, 85); /* 85 - 33% alpha */\n                SDL_SetColorKey(bmpcc, SDL_SRCCOLORKEY | SDL_RLEACCEL, *(Uint8 *)bmpcc->pixels);\n\t\ttmp = bmpcc;\n\t\tbmpcc = SDL_DisplayFormat(bmpcc);\n\t\tSDL_FreeSurface(tmp);\n\t\tif ( ! bmpcc ) {\n\t\t\tprintf(\"Couldn't convert sample.bmp: %s\\n\", SDL_GetError());\n\t\t\treturn 0;\n\t\t}\n\t\tprintf(\"Running display format cc+alpha blit test: %dx%d at %d bpp, flags: \",\n\t\t\tbmpcc->w, bmpcc->h, bmpcc->format->BitsPerPixel);\n\t\tPrintFlags(bmpcc->flags);\n\t\tprintf(\"\\n\");\n\t\tthen = SDL_GetTicks();\n\t\tframes = RunBlitTests(screen, bmpcc, NUM_BLITS);\n\t\tnow = SDL_GetTicks();\n\t\tseconds = (float)(now - then) / 1000.0f;\n\t\tif ( seconds > 0.0f ) {\n\t\t\tprintf(\"%d cc+alpha blits / %d updates in %2.2f seconds, %2.2f FPS\\n\", NUM_BLITS*frames, frames, seconds, (float)frames / seconds);\n\t\t} else {\n\t\t\tprintf(\"%d cc+alpha blits / %d updates in zero seconds!\\n\", NUM_BLITS*frames, frames);\n\t\t}\n\t}\n\n\tSDL_FreeSurface(bmpcc);\n\tSDL_FreeSurface(bmp);\n\n\twhile ( SDL_PollEvent(&event) ) {\n\t\tif ( event.type == SDL_KEYDOWN )\n\t\t\treturn 0;\n\t}\n\treturn 1;\n}\n\nvoid RunVideoTests()\n{\n\tstatic const struct {\n\t\tint w, h, bpp;\n\t} mode_list[] = {\n\t\t{ 640, 480, 8 }, { 640, 480, 16 }, { 640, 480, 32 },\n\t\t{ 800, 600, 8 }, { 800, 600, 16 }, { 800, 600, 32 },\n\t\t{ 1024, 768, 8 }, { 1024, 768, 16 }, { 1024, 768, 32 }\n\t};\n\tstatic const Uint32 flags[] = {\n\t\t(SDL_SWSURFACE),\n\t\t(SDL_SWSURFACE | SDL_FULLSCREEN),\n\t\t(SDL_HWSURFACE | SDL_FULLSCREEN),\n\t\t(SDL_HWSURFACE | SDL_FULLSCREEN | SDL_DOUBLEBUF)\n\t};\n\tint i, j;\n\tSDL_Surface *screen;\n\n\t/* Test out several different video mode combinations */\n\tSDL_WM_SetCaption(\"SDL Video Benchmark\", \"vidtest\");\n\tSDL_ShowCursor(0);\n\tfor ( i = 0; i < SDL_TABLESIZE(mode_list); ++i ) {\n\t\tfor ( j = 0; j < SDL_TABLESIZE(flags); ++j ) {\n\t\t\tprintf(\"===================================\\n\");\n\t\t\tprintf(\"Setting video mode: %dx%d at %d bpp, flags: \",\n\t\t\t                          mode_list[i].w,\n\t\t\t                          mode_list[i].h,\n\t\t\t                          mode_list[i].bpp);\n\t\t\tPrintFlags(flags[j]);\n\t\t\tprintf(\"\\n\");\n\t\t\tscreen = SDL_SetVideoMode(mode_list[i].w,\n\t\t\t                          mode_list[i].h,\n\t\t\t                          mode_list[i].bpp,\n\t\t\t                          flags[j]);\n\t\t\tif ( ! screen ) {\n\t\t\t\tprintf(\"Setting video mode failed: %s\\n\", SDL_GetError());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ( (screen->flags & FLAG_MASK) != flags[j] ) {\n\t\t\t\tprintf(\"Flags didn't match: \");\n\t\t\t\tPrintFlags(screen->flags);\n\t\t\t\tprintf(\"\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ( ! RunModeTests(screen) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(int argc, char *argv[])\n{\n\tconst SDL_VideoInfo *info;\n\tint i;\n\tSDL_Rect **modes;\n\tchar driver[128];\n\n\tif ( SDL_Init(SDL_INIT_VIDEO) < 0 ) {\n\t\tfprintf(stderr,\n\t\t\t\"Couldn't initialize SDL: %s\\n\", SDL_GetError());\n\t\texit(1);\n\t}\n\tif ( SDL_VideoDriverName(driver, sizeof(driver)) ) {\n\t\tprintf(\"Video driver: %s\\n\", driver);\n\t}\n\tinfo = SDL_GetVideoInfo();\n\tprintf(\n\"Current display: %dx%d, %d bits-per-pixel\\n\",\n\t\tinfo->current_w, info->current_h, info->vfmt->BitsPerPixel);\n\tif ( info->vfmt->palette == NULL ) {\n\t\tprintf(\"\tRed Mask = 0x%.8x\\n\", info->vfmt->Rmask);\n\t\tprintf(\"\tGreen Mask = 0x%.8x\\n\", info->vfmt->Gmask);\n\t\tprintf(\"\tBlue Mask = 0x%.8x\\n\", info->vfmt->Bmask);\n\t}\n\t/* Print available fullscreen video modes */\n\tmodes = SDL_ListModes(NULL, SDL_FULLSCREEN);\n\tif ( modes == (SDL_Rect **)0 ) {\n\t\tprintf(\"No available fullscreen video modes\\n\");\n\t} else\n\tif ( modes == (SDL_Rect **)-1 ) {\n\t\tprintf(\"No special fullscreen video modes\\n\");\n\t} else {\n\t\tprintf(\"Fullscreen video modes:\\n\");\n\t\tfor ( i=0; modes[i]; ++i ) {\n\t\t\tprintf(\"\\t%dx%dx%d\\n\", modes[i]->w, modes[i]->h, info->vfmt->BitsPerPixel);\n\t\t}\n\t}\n\tif ( info->wm_available ) {\n\t\tprintf(\"A window manager is available\\n\");\n\t}\n\tif ( info->hw_available ) {\n\t\tprintf(\"Hardware surfaces are available (%dK video memory)\\n\",\n\t\t\tinfo->video_mem);\n\t}\n\tif ( info->blit_hw ) {\n\t\tprintf(\n\"Copy blits between hardware surfaces are accelerated\\n\");\n\t}\n\tif ( info->blit_hw_CC ) {\n\t\tprintf(\n\"Colorkey blits between hardware surfaces are accelerated\\n\");\n\t}\n\tif ( info->blit_hw_A ) {\n\t\tprintf(\n\"Alpha blits between hardware surfaces are accelerated\\n\");\n\t}\n\tif ( info->blit_sw ) {\n\t\tprintf(\n\"Copy blits from software surfaces to hardware surfaces are accelerated\\n\");\n\t}\n\tif ( info->blit_sw_CC ) {\n\t\tprintf(\n\"Colorkey blits from software surfaces to hardware surfaces are accelerated\\n\");\n\t}\n\tif ( info->blit_sw_A ) {\n\t\tprintf(\n\"Alpha blits from software surfaces to hardware surfaces are accelerated\\n\");\n\t}\n\tif ( info->blit_fill ) {\n\t\tprintf(\n\"Color fills on hardware surfaces are accelerated\\n\");\n\t}\n\n\tif ( argv[1] && (strcmp(argv[1], \"-benchmark\") == 0) ) {\n\t\tRunVideoTests();\n\t}\n\n\tSDL_Quit();\n\treturn(0);\n}\n"]}