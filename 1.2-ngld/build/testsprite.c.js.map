{"version":3,"file":"testsprite.c.js","sources":["../SDL-1.2.15/testsprite.c"],"names":[],"mappingswKA;AAAA;AAAA;AAAA;;;AAqIA;;AAjIA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AACA;AAAA;;;AACA;;;;;AAIA;;;;;AAGA;AACA;;AAAA;AACA;AAAA;;;;;;AAIA;AAAA;AAAA;AA9DA;AACA;;;AAWA;;;;;;;;;;;;AAkDA;;;;;;AAGA;AAAA;;;;;;AAGA;AAAA;;;;;;AAGA;;;;;;AAGA;AAAA;;;;;;;;;AAGA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;AAKA;AAAA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;;AAKA;;;AAIA;AAAA;AAAA;;AAEA;AACA;AAAA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAFA;AAAA;;;;;;;;;;;;;AAPA;AAAA;;;AAYA;AAGA;AAAA;;AAEA;;AAEA;;;AAGA;;;AAGA;;AAEA;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;AACA;;;;AAGA;;AAIA;AACA;AACA;AACA;AAKA;;;AACA;;;;;;;;;;;AAnOA;;;AAmBA;AANA;AALA;;;AAHA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;AAEA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;AAEA;AAAA;AACA;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAhBA;AAiBA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAoBA;;;;;;AAbA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;AAQA;AAEA;;;;AAJA;AAIA;;;;;;;;;AAhFA;AAAA;;AAEA;AAAA;AAAA;AAAA;;;AAsBA;;;;;AAhBA;AAAA;;;AAKA;AACA;;AAEA;AACA;AAAA;AAAA;;;AAOA;;AAJA;;;AAIA;;;;;;;AAkPA;;;AAEA;;AAEA;AAAA;;AAKA;;;;AAMA;;AAKA;;;;;;AAKA;AACA;AAGA;AAAA;AACA;;AACA;AAAA;AAAA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArTA;AACA","sourcesContent":["/* Simple program:  Move N sprites around on the screen as fast as possible */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <math.h>\n#include <time.h>\n\n#include \"SDL.h\"\n\n#ifdef EMSCRIPTEN\n\t#include <emscripten.h>\n\tvoid main_loop();\n#endif\n\n#define NUM_SPRITES\t100\n#define MAX_SPEED \t1\n\nSDL_Surface *sprite;\nint numsprites;\nSDL_Rect *sprite_rects;\nSDL_Rect *positions;\nSDL_Rect *velocities;\nint sprites_visible;\nint debug_flip;\nUint16 sprite_w, sprite_h;\n\n/* Call this instead of exit(), so we can clean up SDL: atexit() is evil. */\nstatic void quit(int rc)\n{\n\tSDL_Quit();\n\texit(rc);\n}\n\nint LoadSprite(char *file)\n{\n\tSDL_Surface *temp;\n\n\t/* Load the sprite image */\n\tsprite = SDL_LoadBMP(file);\n\tif ( sprite == NULL ) {\n\t\tfprintf(stderr, \"Couldn't load %s: %s\", file, SDL_GetError());\n\t\treturn(-1);\n\t}\n\n\t/* Set transparent pixel as the pixel at (0,0) */\n\tif ( sprite->format->palette ) {\n\t\tSDL_SetColorKey(sprite, (SDL_SRCCOLORKEY|SDL_RLEACCEL),\n\t\t\t\t\t\t*(Uint8 *)sprite->pixels);\n\t}\n\n\t/* Convert sprite to video format */\n\ttemp = SDL_DisplayFormat(sprite);\n\tSDL_FreeSurface(sprite);\n\tif ( temp == NULL ) {\n\t\tfprintf(stderr, \"Couldn't convert background: %s\\n\",\n\t\t\t\t\t\t\tSDL_GetError());\n\t\treturn(-1);\n\t}\n\tsprite = temp;\n\n\t/* We're ready to roll. :) */\n\treturn(0);\n}\n\nvoid MoveSprites(SDL_Surface *screen, Uint32 background)\n{\n\tint i, nupdates;\n\tSDL_Rect area, *position, *velocity;\n\n\tnupdates = 0;\n\t/* Erase all the sprites if necessary */\n\tif ( sprites_visible ) {\n\t\tSDL_FillRect(screen, NULL, background);\n\t}\n\n\t/* Move the sprite, bounce at the wall, and draw */\n\tfor ( i=0; i<numsprites; ++i ) {\n\t\tposition = &positions[i];\n\t\tvelocity = &velocities[i];\n\t\tposition->x += velocity->x;\n\t\tif ( (position->x < 0) || (position->x >= (screen->w - sprite_w)) ) {\n\t\t\tvelocity->x = -velocity->x;\n\t\t\tposition->x += velocity->x;\n\t\t}\n\t\tposition->y += velocity->y;\n\t\tif ( (position->y < 0) || (position->y >= (screen->h - sprite_w)) ) {\n\t\t\tvelocity->y = -velocity->y;\n\t\t\tposition->y += velocity->y;\n\t\t}\n\n\t\t/* Blit the sprite onto the screen */\n\t\tarea = *position;\n\t\tSDL_BlitSurface(sprite, NULL, screen, &area);\n\t\tsprite_rects[nupdates++] = area;\n\t}\n\n\tif (debug_flip) {\n\t\tif ( (screen->flags & SDL_DOUBLEBUF) == SDL_DOUBLEBUF ) {\n\t\t\tstatic int t = 0;\n\n\t\t\tUint32 color = SDL_MapRGB (screen->format, 255, 0, 0);\n\t\t\tSDL_Rect r;\n\t\t\tr.x = (sin((float)t * 2 * 3.1459) + 1.0) / 2.0 * (screen->w-20);\n\t\t\tr.y = 0;\n\t\t\tr.w = 20;\n\t\t\tr.h = screen->h;\n\n\t\t\tSDL_FillRect (screen, &r, color);\n\t\t\tt+=2;\n\t\t}\n\t}\n\n\t/* Update the screen! */\n\tif ( (screen->flags & SDL_DOUBLEBUF) == SDL_DOUBLEBUF ) {\n\t\tSDL_Flip(screen);\n\t} else {\n\t\tSDL_UpdateRects(screen, nupdates, sprite_rects);\n\t}\n\tsprites_visible = 1;\n}\n\n/* This is a way of telling whether or not to use hardware surfaces */\nUint32 FastestFlags(Uint32 flags, int width, int height, int bpp)\n{\n\tconst SDL_VideoInfo *info;\n\n\t/* Hardware acceleration is only used in fullscreen mode */\n\tflags |= SDL_FULLSCREEN;\n\n\t/* Check for various video capabilities */\n\tinfo = SDL_GetVideoInfo();\n\tif ( info->blit_hw_CC && info->blit_fill ) {\n\t\t/* We use accelerated colorkeying and color filling */\n\t\tflags |= SDL_HWSURFACE;\n\t}\n\t/* If we have enough video memory, and will use accelerated\n\t   blits directly to it, then use page flipping.\n\t */\n\tif ( (flags & SDL_HWSURFACE) == SDL_HWSURFACE ) {\n\t\t/* Direct hardware blitting without double-buffering\n\t\t   causes really bad flickering.\n\t\t */\n\t\tif ( info->video_mem*1024 > (height*width*bpp/8) ) {\n\t\t\tflags |= SDL_DOUBLEBUF;\n\t\t} else {\n\t\t\tflags &= ~SDL_HWSURFACE;\n\t\t}\n\t}\n\n\t/* Return the flags */\n\treturn(flags);\n}\n\nSDL_Surface *screen;\nUint8 *mem;\nint width, height;\nUint8  video_bpp;\nUint32 videoflags;\nUint32 background;\nint    i, done;\nSDL_Event event;\nUint32 then, now, frames;\nint main(int argc, char *argv[])\n{\n\t/* Initialize SDL */\n\tif ( SDL_Init(SDL_INIT_VIDEO) < 0 ) {\n\t\tfprintf(stderr, \"Couldn't initialize SDL: %s\\n\",SDL_GetError());\n\t\treturn(1);\n\t}\n\n\tnumsprites = NUM_SPRITES;\n\tvideoflags = SDL_SWSURFACE|SDL_ANYFORMAT;\n\twidth = 640;\n\theight = 480;\n\tvideo_bpp = 8;\n\tdebug_flip = 0;\n\twhile ( argc > 1 ) {\n\t\t--argc;\n\t\tif ( strcmp(argv[argc-1], \"-width\") == 0 ) {\n\t\t\twidth = atoi(argv[argc]);\n\t\t\t--argc;\n\t\t} else\n\t\tif ( strcmp(argv[argc-1], \"-height\") == 0 ) {\n\t\t\theight = atoi(argv[argc]);\n\t\t\t--argc;\n\t\t} else\n\t\tif ( strcmp(argv[argc-1], \"-bpp\") == 0 ) {\n\t\t\tvideo_bpp = atoi(argv[argc]);\n\t\t\tvideoflags &= ~SDL_ANYFORMAT;\n\t\t\t--argc;\n\t\t} else\n\t\tif ( strcmp(argv[argc], \"-fast\") == 0 ) {\n\t\t\tvideoflags = FastestFlags(videoflags, width, height, video_bpp);\n\t\t} else\n\t\tif ( strcmp(argv[argc], \"-hw\") == 0 ) {\n\t\t\tvideoflags ^= SDL_HWSURFACE;\n\t\t} else\n\t\tif ( strcmp(argv[argc], \"-flip\") == 0 ) {\n\t\t\tvideoflags ^= SDL_DOUBLEBUF;\n\t\t} else\n\t\tif ( strcmp(argv[argc], \"-debugflip\") == 0 ) {\n\t\t\tdebug_flip ^= 1;\n\t\t} else\n\t\tif ( strcmp(argv[argc], \"-fullscreen\") == 0 ) {\n\t\t\tvideoflags ^= SDL_FULLSCREEN;\n\t\t} else\n\t\tif ( isdigit(argv[argc][0]) ) {\n\t\t\tnumsprites = atoi(argv[argc]);\n\t\t} else {\n\t\t\tfprintf(stderr, \n\t\"Usage: %s [-bpp N] [-hw] [-flip] [-fast] [-fullscreen] [numsprites]\\n\",\n\t\t\t\t\t\t\t\targv[0]);\n\t\t\tquit(1);\n\t\t}\n\t}\n\n\t/* Set video mode */\n\tscreen = SDL_SetVideoMode(width, height, video_bpp, videoflags);\n\tif ( ! screen ) {\n\t\tfprintf(stderr, \"Couldn't set %dx%d video mode: %s\\n\",\n\t\t\t\t\twidth, height, SDL_GetError());\n\t\tquit(2);\n\t}\n\n\t/* Load the sprite */\n\tif ( LoadSprite(\"icon.bmp\") < 0 ) {\n\t\tquit(1);\n\t}\n\n\t/* Allocate memory for the sprite info */\n\tmem = (Uint8 *)malloc(4*sizeof(SDL_Rect)*numsprites);\n\tif ( mem == NULL ) {\n\t\tSDL_FreeSurface(sprite);\n\t\tfprintf(stderr, \"Out of memory!\\n\");\n\t\tquit(2);\n\t}\n\tsprite_rects = (SDL_Rect *)mem;\n\tpositions = sprite_rects;\n\tsprite_rects += numsprites;\n\tvelocities = sprite_rects;\n\tsprite_rects += numsprites;\n\tsprite_w = sprite->w;\n\tsprite_h = sprite->h;\n\tsrand(time(NULL));\n\tfor ( i=0; i<numsprites; ++i ) {\n\t\tpositions[i].x = rand()%(screen->w - sprite_w);\n\t\tpositions[i].y = rand()%(screen->h - sprite_h);\n\t\tpositions[i].w = sprite->w;\n\t\tpositions[i].h = sprite->h;\n\t\tvelocities[i].x = 0;\n\t\tvelocities[i].y = 0;\n\t\twhile ( ! velocities[i].x && ! velocities[i].y ) {\n\t\t\tvelocities[i].x = (rand()%(MAX_SPEED*2+1))-MAX_SPEED;\n\t\t\tvelocities[i].y = (rand()%(MAX_SPEED*2+1))-MAX_SPEED;\n\t\t}\n\t}\n\tbackground = SDL_MapRGB(screen->format, 0x00, 0x00, 0x00);\n\n\t/* Print out information about our surfaces */\n\tprintf(\"Screen is at %d bits per pixel\\n\",screen->format->BitsPerPixel);\n\tif ( (screen->flags & SDL_HWSURFACE) == SDL_HWSURFACE ) {\n\t\tprintf(\"Screen is in video memory\\n\");\n\t} else {\n\t\tprintf(\"Screen is in system memory\\n\");\n\t}\n\tif ( (screen->flags & SDL_DOUBLEBUF) == SDL_DOUBLEBUF ) {\n\t\tprintf(\"Screen has double-buffering enabled\\n\");\n\t}\n\tif ( (sprite->flags & SDL_HWSURFACE) == SDL_HWSURFACE ) {\n\t\tprintf(\"Sprite is in video memory\\n\");\n\t} else {\n\t\tprintf(\"Sprite is in system memory\\n\");\n\t}\n\t/* Run a sample blit to trigger blit acceleration */\n\t{ SDL_Rect dst;\n\t\tdst.x = 0;\n\t\tdst.y = 0;\n\t\tdst.w = sprite->w;\n\t\tdst.h = sprite->h;\n\t\tSDL_BlitSurface(sprite, NULL, screen, &dst);\n\t\tSDL_FillRect(screen, &dst, background);\n\t}\n\tif ( (sprite->flags & SDL_HWACCEL) == SDL_HWACCEL ) {\n\t\tprintf(\"Sprite blit uses hardware acceleration\\n\");\n\t}\n\tif ( (sprite->flags & SDL_RLEACCEL) == SDL_RLEACCEL ) {\n\t\tprintf(\"Sprite blit uses RLE acceleration\\n\");\n\t}\n\n\t/* Loop, blitting sprites and waiting for a keystroke */\n\tframes = 0;\n\tthen = SDL_GetTicks();\n\tdone = 0;\n\tsprites_visible = 0;\n\n#ifndef EMSCRIPTEN\n\twhile ( !done ) {\n#else\n\temscripten_set_main_loop(&main_loop, 0, 1);\n}\n\nvoid main_loop() {\n#endif\n\t\t/* Check for events */\n\t\t++frames;\n\t\twhile ( SDL_PollEvent(&event) ) {\n\t\t\tswitch (event.type) {\n\t\t\t\tcase SDL_MOUSEBUTTONDOWN:\n\t\t\t\t\tSDL_WarpMouse(screen->w/2, screen->h/2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SDL_KEYDOWN:\n\t\t\t\t\t/* Any keypress quits the app... */\n\t\t\t\tcase SDL_QUIT:\n\t\t\t\t\tdone = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tMoveSprites(screen, background);\n#ifndef EMSCRIPTEN\n\t}\n#else\n\tif(frames == 10) {\n\t\temscripten_run_script(\"report(true);\");\n\t}\n\t\n\tif(done) {\n#endif\n\tSDL_FreeSurface(sprite);\n\tfree(mem);\n\n\t/* Print out some timing information */\n\tnow = SDL_GetTicks();\n\tif ( now > then ) {\n\t\tprintf(\"%2.2f frames per second\\n\",\n\t\t\t\t\t((double)frames*1000)/(now-then));\n\t}\n\tSDL_Quit();\n\n#ifndef EMSCRIPTEN\n\treturn(0);\n#else\n\t}\n#endif\n}\n"]}