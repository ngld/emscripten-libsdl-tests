{"version":3,"file":"testwin.c.js","sources":["../SDL-1.2.15/testwin.c"],"names":[],"mappingsdA;AACA;AAAA;AAAA;AACA;AACA;AAAA;;;;;AADA;AAuBA;AAAA;;;;;;AAGA;;;;AAWA;AAAA;AAEA;;AACA;AAAA;AAEA;;;;AAFA;AADA;;;;;;;;;AAKA;AACA;;;;;;;AAOA;AACA;;AAGA;AAAA;AAAA;;;;AAGA;;;;;;;;;AAGA;AAAA;AAAA;AAEA;AAAA;AACA;AAGA;AAAA;AAGA;AAAA;;;AAGA;AAAA;AAAA;AAAA;AAKA;;;AALA;AAAA;AAAA;AAAA;;;;;AAQA;;AAFA;;AARA;;;;;AAIA;AAAA;AAAA;;;;;;;AA4BA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AACA;;;;;AACA;AACA;AACA;AAHA;;;;;;;;;;;;AAQA;AAAA;AAEA;AAAA;AAEA;AAAA;AALA;;AAQA;AAVA;;;;;;;;;;AAUA;AAVA;;;;;;;;;AAkBA;;;;;AAEA;AACA;AACA;AAHA;;;;;;;;;;;;AASA;AAAA;AAEA;AAAA;AAEA;AAAA;AALA;;AAQA;AAVA;;;;;;;;;;AAUA;AAVA;;;;;;;;;;;;;AAgBA;AACA;AACA;AAHA;;AAKA;AACA;AAAA;AACA;;;;;;;;;AAEA;AACA;AACA;AAHA;;;;;;;;;;;;AAQA;AAAA;AAEA;AAAA;AAEA;AAAA;AALA;;AAQA;AAVA;;;AARA;AACA;AAAA;AACA;;;;;;;;AAgBA;AAVA;;;;;;;;;AAeA;AAAA;;;;AAKA;AACA;AAAA;;;;;;;;;;AAkCA;AACA;AAAA;AAAA;;;AAkHA;;;;;;;;;;;;;AA7GA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;AAWA;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;AAUA;AAAA;;;;;AAAA;;;;;;;;;;;;;;;;AAUA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1BA;AAAA;AAEA;;;AA6BA;AAEA;;;AAvBA;AAAA;AAEA;;;AAFA;AAAA;AAEA;;;AAQA;AAAA;AAEA;;;AAFA;AAAA;AAEA;;;;;;;;;;;;;AAsCA;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;;;;AAGA;;;AAKA;AAIA;AACA;AAEA;AAAA;AAAA;AAOA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhXA;AACA","sourcesContent":["\n/* Bring up a window and play with it */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\n#define BENCHMARK_SDL\n\n#define NOTICE(X)\tprintf(\"%s\", X);\n\n#include \"SDL.h\"\n\n/* Call this instead of exit(), so we can clean up SDL: atexit() is evil. */\nstatic void quit(int rc)\n{\n\tSDL_Quit();\n\texit(rc);\n}\n\nvoid DrawPict(SDL_Surface *screen, char *bmpfile,\n\t\t\t\t\tint speedy, int flip, int nofade)\n{\n\tSDL_Surface *picture;\n\tSDL_Rect dest, update;\n\tint i, centered;\n\tint ncolors;\n\tSDL_Color *colors, *cmap;\n\n\t/* Load the image into a surface */\n\tif ( bmpfile == NULL ) {\n\t\tbmpfile = \"sample.bmp\";\t\t/* Sample image */\n\t}\nfprintf(stderr, \"Loading picture: %s\\n\", bmpfile);\n\tpicture = SDL_LoadBMP(bmpfile);\n\tif ( picture == NULL ) {\n\t\tfprintf(stderr, \"Couldn't load %s: %s\\n\", bmpfile,\n\t\t\t\t\t\t\tSDL_GetError());\n\t\treturn;\n\t}\n\n\t/* Set the display colors -- on a hicolor display this is a no-op */\n\tif ( picture->format->palette ) {\n\t\tncolors = picture->format->palette->ncolors;\n\t\tcolors  = (SDL_Color *)malloc(ncolors*sizeof(SDL_Color));\n\t\tcmap    = (SDL_Color *)malloc(ncolors*sizeof(SDL_Color));\n\t\tmemcpy(colors, picture->format->palette->colors,\n\t\t\t\t\t\tncolors*sizeof(SDL_Color));\n\t} else {\n\t\tint       r, g, b;\n\n\t\t/* Allocate 256 color palette */\n\t\tncolors = 256;\n\t\tcolors  = (SDL_Color *)malloc(ncolors*sizeof(SDL_Color));\n\t\tcmap    = (SDL_Color *)malloc(ncolors*sizeof(SDL_Color));\n\n\t\t/* Set a 3,3,2 color cube */\n\t\tfor ( r=0; r<8; ++r ) {\n\t\t\tfor ( g=0; g<8; ++g ) {\n\t\t\t\tfor ( b=0; b<4; ++b ) {\n\t\t\t\t\ti = ((r<<5)|(g<<2)|b);\n\t\t\t\t\tcolors[i].r = r<<5;\n\t\t\t\t\tcolors[i].g = g<<5;\n\t\t\t\t\tcolors[i].b = b<<6;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\nNOTICE(\"testwin: setting colors\\n\");\n\tif ( ! SDL_SetColors(screen, colors, 0, ncolors) &&\n\t\t\t\t(screen->format->palette != NULL) ) {\n\t\tfprintf(stderr,\n\"Warning: Couldn't set all of the colors, but SDL will map the image\\n\"\n\"         (colormap fading will suffer - try the -warp option)\\n\"\n\t\t);\n\t}\n\n\t/* Set the screen to black (not really necessary) */\n\tif ( SDL_LockSurface(screen) == 0 ) {\n\t\tUint32 black;\n\t\tUint8 *pixels;\n\n\t\tblack = SDL_MapRGB(screen->format, 0, 0, 0);\n\t\tpixels = (Uint8 *)screen->pixels;\n\t\tfor ( i=0; i<screen->h; ++i ) {\n\t\t\tmemset(pixels, black,\n\t\t\t\tscreen->w*screen->format->BytesPerPixel);\n\t\t\tpixels += screen->pitch;\n\t\t}\n\t\tSDL_UnlockSurface(screen);\n\t\tSDL_UpdateRect(screen, 0, 0, 0, 0);\n\t}\n\t\n\t/* Display the picture */\n\tif ( speedy ) {\n\t\tSDL_Surface *displayfmt;\n\nfprintf(stderr, \"Converting picture\\n\");\n\t\tdisplayfmt = SDL_DisplayFormat(picture);\n\t\tif ( displayfmt == NULL ) {\n\t\t\tfprintf(stderr,\n\t\t\t\t\"Couldn't convert image: %s\\n\", SDL_GetError());\n\t\t\tgoto done;\n\t\t}\n\t\tSDL_FreeSurface(picture);\n\t\tpicture = displayfmt;\n\t}\n\tprintf(\"(image surface located in %s memory)\\n\", \n\t\t\t(picture->flags&SDL_HWSURFACE) ? \"video\" : \"system\");\n\tcentered = (screen->w - picture->w)/2;\n\tif ( centered < 0 ) {\n\t\tcentered = 0;\n\t}\n\tdest.y = (screen->h - picture->h)/2;\n\tdest.w = picture->w;\n\tdest.h = picture->h;\nNOTICE(\"testwin: moving image\\n\");\n\tfor ( i=0; i<=centered; ++i ) {\n\t\tdest.x = i;\n\t\tupdate = dest;\n\t\tif ( SDL_BlitSurface(picture, NULL, screen, &update) < 0 ) {\n\t\t\tfprintf(stderr, \"Blit failed: %s\\n\", SDL_GetError());\n\t\t\tbreak;\n\t\t}\n\t\tif ( flip ) {\n\t\t\tSDL_Flip(screen);\n\t\t} else {\n\t\t\tSDL_UpdateRects(screen, 1, &update);\n\t\t}\n\t}\n\n#ifdef SCREENSHOT\n\tif ( SDL_SaveBMP(screen, \"screen.bmp\") < 0 )\n\t\tprintf(\"Couldn't save screen: %s\\n\", SDL_GetError());\n#endif\n\n#if !defined(BENCHMARK_SDL) && !defined(EMSCRIPTEN)\n\t/* Let it sit there for a while */\n\tSDL_Delay(5*1000);\n#endif\n\t/* Fade the colormap */\n\tif ( ! nofade ) {\n\t\tint maxstep;\n\t\tSDL_Color final;\n\t\tSDL_Color palcolors[256];\n\t\tstruct {\n\t\t\tSint16 r, g, b;\n\t\t} cdist[256];\n\nNOTICE(\"testwin: fading out...\\n\");\n\t\tmemcpy(cmap, colors, ncolors*sizeof(SDL_Color));\n\t\tmaxstep = 32-1;\n\t\tfinal.r = 0xFF;\n\t\tfinal.g = 0x00;\n\t\tfinal.b = 0x00;\n\t\tmemcpy(palcolors, colors, ncolors*sizeof(SDL_Color));\n\t\tfor ( i=0; i<ncolors; ++i ) {\n\t\t\tcdist[i].r = final.r-palcolors[i].r;\n\t\t\tcdist[i].g = final.g-palcolors[i].g;\n\t\t\tcdist[i].b = final.b-palcolors[i].b;\n\t\t}\n\t\tfor ( i=0; i<=maxstep/2; ++i ) {\t/* halfway fade */\n\t\t\tint c;\n\t\t\tfor ( c=0; c<ncolors; ++c ) {\n\t\t\t\tcolors[c].r =\n\t\t\t\t\tpalcolors[c].r+((cdist[c].r*i))/maxstep;\n\t\t\t\tcolors[c].g =\n\t\t\t\t\tpalcolors[c].g+((cdist[c].g*i))/maxstep;\n\t\t\t\tcolors[c].b =\n\t\t\t\t\tpalcolors[c].b+((cdist[c].b*i))/maxstep;\n\t\t\t}\n\t\t\tSDL_SetColors(screen, colors, 0, ncolors);\n#ifndef EMSCRIPTEN\n\t\t\tSDL_Delay(1);\n#endif\n\t\t}\n\t\tfinal.r = 0x00;\n\t\tfinal.g = 0x00;\n\t\tfinal.b = 0x00;\n\t\tmemcpy(palcolors, colors, ncolors*sizeof(SDL_Color));\n\t\tfor ( i=0; i<ncolors; ++i ) {\n\t\t\tcdist[i].r = final.r-palcolors[i].r;\n\t\t\tcdist[i].g = final.g-palcolors[i].g;\n\t\t\tcdist[i].b = final.b-palcolors[i].b;\n\t\t}\n\t\tmaxstep /= 2;\n\t\tfor ( i=0; i<=maxstep; ++i ) {\t\t/* finish fade out */\n\t\t\tint c;\n\t\t\tfor ( c=0; c<ncolors; ++c ) {\n\t\t\t\tcolors[c].r =\n\t\t\t\t\tpalcolors[c].r+((cdist[c].r*i))/maxstep;\n\t\t\t\tcolors[c].g =\n\t\t\t\t\tpalcolors[c].g+((cdist[c].g*i))/maxstep;\n\t\t\t\tcolors[c].b =\n\t\t\t\t\tpalcolors[c].b+((cdist[c].b*i))/maxstep;\n\t\t\t}\n\t\t\tSDL_SetColors(screen, colors, 0, ncolors);\n#ifndef EMSCRIPTEN\n\t\t\tSDL_Delay(1);\n#endif\n\t\t}\n\t\tfor ( i=0; i<ncolors; ++i ) {\n\t\t\tcolors[i].r = final.r;\n\t\t\tcolors[i].g = final.g;\n\t\t\tcolors[i].b = final.b;\n\t\t}\n\t\tSDL_SetColors(screen, colors, 0, ncolors);\nNOTICE(\"testwin: fading in...\\n\");\n\t\tmemcpy(palcolors, colors, ncolors*sizeof(SDL_Color));\n\t\tfor ( i=0; i<ncolors; ++i ) {\n\t\t\tcdist[i].r = cmap[i].r-palcolors[i].r;\n\t\t\tcdist[i].g = cmap[i].g-palcolors[i].g;\n\t\t\tcdist[i].b = cmap[i].b-palcolors[i].b;\n\t\t}\n\t\tfor ( i=0; i<=maxstep; ++i ) {\t/* 32 step fade in */\n\t\t\tint c;\n\t\t\tfor ( c=0; c<ncolors; ++c ) {\n\t\t\t\tcolors[c].r =\n\t\t\t\t\tpalcolors[c].r+((cdist[c].r*i))/maxstep;\n\t\t\t\tcolors[c].g =\n\t\t\t\t\tpalcolors[c].g+((cdist[c].g*i))/maxstep;\n\t\t\t\tcolors[c].b =\n\t\t\t\t\tpalcolors[c].b+((cdist[c].b*i))/maxstep;\n\t\t\t}\n\t\t\tSDL_SetColors(screen, colors, 0, ncolors);\n#ifndef EMSCRIPTEN\n\t\t\tSDL_Delay(1);\n#endif\n\t\t}\nNOTICE(\"testwin: fading over\\n\");\n\t}\n\t\ndone:\n\t/* Free the picture and return */\n\tSDL_FreeSurface(picture);\n\tfree(colors); free(cmap);\n\treturn;\n}\n\nint main(int argc, char *argv[])\n{\n\tSDL_Surface *screen;\n\t/* Options */\n\tint speedy, flip, nofade;\n\tint delay;\n\tint w, h;\n\tint desired_bpp;\n\tUint32 video_flags;\n#ifdef BENCHMARK_SDL\n\tUint32 then, now;\n#endif\n\t/* Set default options and check command-line */\n\tspeedy = 0;\n\tflip = 0;\n\tnofade = 0;\n\tdelay = 1;\n\n#ifdef _WIN32_WCE\n\tw = 240;\n\th = 320;\n\tdesired_bpp = 8;\n\tvideo_flags = SDL_FULLSCREEN;\n#else\n\tw = 640;\n\th = 480;\n\tdesired_bpp = 0;\n\tvideo_flags = 0;\n#endif\n\tif ( SDL_Init(SDL_INIT_VIDEO) < 0 ) {\n\t\tfprintf(stderr,\n\t\t\t\"Couldn't initialize SDL: %s\\n\", SDL_GetError());\n\t\treturn(1);\n\t}\n\n\twhile ( argc > 1 ) {\n\t\tif ( strcmp(argv[1], \"-speedy\") == 0 ) {\n\t\t\tspeedy = 1;\n\t\t\targv += 1;\n\t\t\targc -= 1;\n\t\t} else\n\t\tif ( strcmp(argv[1], \"-nofade\") == 0 ) {\n\t\t\tnofade = 1;\n\t\t\targv += 1;\n\t\t\targc -= 1;\n\t\t} else\n\t\tif ( strcmp(argv[1], \"-delay\") == 0 ) {\n\t\t\tif ( argv[2] ) {\n\t\t\t\tdelay = atoi(argv[2]);\n\t\t\t\targv += 2;\n\t\t\t\targc -= 2;\n\t\t\t} else {\n\t\t\t\tfprintf(stderr,\n\t\t\t\t\"The -delay option requires an argument\\n\");\n\t\t\t\tquit(1);\n\t\t\t}\n\t\t} else\n\t\tif ( strcmp(argv[1], \"-width\") == 0 ) {\n\t\t\tif ( argv[2] && ((w = atoi(argv[2])) > 0) ) {\n\t\t\t\targv += 2;\n\t\t\t\targc -= 2;\n\t\t\t} else {\n\t\t\t\tfprintf(stderr,\n\t\t\t\t\"The -width option requires an argument\\n\");\n\t\t\t\tquit(1);\n\t\t\t}\n\t\t} else\n\t\tif ( strcmp(argv[1], \"-height\") == 0 ) {\n\t\t\tif ( argv[2] && ((h = atoi(argv[2])) > 0) ) {\n\t\t\t\targv += 2;\n\t\t\t\targc -= 2;\n\t\t\t} else {\n\t\t\t\tfprintf(stderr,\n\t\t\t\t\"The -height option requires an argument\\n\");\n\t\t\t\tquit(1);\n\t\t\t}\n\t\t} else\n\t\tif ( strcmp(argv[1], \"-bpp\") == 0 ) {\n\t\t\tif ( argv[2] ) {\n\t\t\t\tdesired_bpp = atoi(argv[2]);\n\t\t\t\targv += 2;\n\t\t\t\targc -= 2;\n\t\t\t} else {\n\t\t\t\tfprintf(stderr,\n\t\t\t\t\"The -bpp option requires an argument\\n\");\n\t\t\t\tquit(1);\n\t\t\t}\n\t\t} else\n\t\tif ( strcmp(argv[1], \"-warp\") == 0 ) {\n\t\t\tvideo_flags |= SDL_HWPALETTE;\n\t\t\targv += 1;\n\t\t\targc -= 1;\n\t\t} else\n\t\tif ( strcmp(argv[1], \"-hw\") == 0 ) {\n\t\t\tvideo_flags |= SDL_HWSURFACE;\n\t\t\targv += 1;\n\t\t\targc -= 1;\n\t\t} else\n\t\tif ( strcmp(argv[1], \"-flip\") == 0 ) {\n\t\t\tvideo_flags |= SDL_DOUBLEBUF;\n\t\t\targv += 1;\n\t\t\targc -= 1;\n\t\t} else\n\t\tif ( strcmp(argv[1], \"-fullscreen\") == 0 ) {\n\t\t\tvideo_flags |= SDL_FULLSCREEN;\n\t\t\targv += 1;\n\t\t\targc -= 1;\n\t\t} else\n\t\t\tbreak;\n\t}\n\n\t/* Initialize the display */\n\tscreen = SDL_SetVideoMode(w, h, desired_bpp, video_flags);\n\tif ( screen == NULL ) {\n\t\tfprintf(stderr, \"Couldn't set %dx%dx%d video mode: %s\\n\",\n\t\t\t\t\tw, h, desired_bpp, SDL_GetError());\n\t\tquit(1);\n\t}\n\tprintf(\"Set%s %dx%dx%d mode\\n\",\n\t\t\tscreen->flags & SDL_FULLSCREEN ? \" fullscreen\" : \"\",\n\t\t\tscreen->w, screen->h, screen->format->BitsPerPixel);\n\tprintf(\"(video surface located in %s memory)\\n\",\n\t\t\t(screen->flags&SDL_HWSURFACE) ? \"video\" : \"system\");\n\tif ( screen->flags & SDL_DOUBLEBUF ) {\n\t\tprintf(\"Double-buffering enabled\\n\");\n\t\tflip = 1;\n\t}\n\n\t/* Set the window manager title bar */\n\tSDL_WM_SetCaption(\"SDL test window\", \"testwin\");\n\n\t/* Do all the drawing work */\n#ifdef BENCHMARK_SDL\n\tthen = SDL_GetTicks();\n\tDrawPict(screen, argv[1], speedy, flip, nofade);\n\tnow = SDL_GetTicks();\n\tprintf(\"Time: %d milliseconds\\n\", now-then);\n#else\n\tDrawPict(screen, argv[1], speedy, flip, nofade);\n#endif\n#ifndef EMSCRIPTEN\n\tSDL_Delay(delay*1000);\n#endif\n\tSDL_Quit();\n\treturn(0);\n}\n"]}